//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 HqlSqlWalker.g 2014-10-10 11:16:23

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
using System.Text;
using NHibernate.Hql.Ast.ANTLR.Tree;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;



namespace  NHibernate.Hql.Ast.ANTLR 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class HqlSqlWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AGGREGATE", "ALIAS", "ALL", "AND", "ANY", "AS", "ASCENDING", "AVG", "BAND", "BETWEEN", "BNOT", "BOR", "BOTH", "BXOR", "CASE", "CASE2", "CLASS", "CLOSE", "CLOSE_BRACKET", "COLON", "COMMA", "CONCAT", "CONSTANT", "CONSTRUCTOR", "COUNT", "DELETE", "DESCENDING", "DISTINCT", "DIV", "DOT", "ELEMENTS", "ELSE", "EMPTY", "END", "EQ", "ESCAPE", "ESCqs", "EXISTS", "EXPONENT", "EXPR_LIST", "FALSE", "FETCH", "FILTER_ENTITY", "FLOAT_SUFFIX", "FROM", "FULL", "GE", "GROUP", "GT", "HAVING", "HEX_DIGIT", "IDENT", "ID_LETTER", "ID_START_LETTER", "IN", "INDEX_OP", "INDICES", "INNER", "INSERT", "INTO", "IN_LIST", "IS", "IS_NOT_NULL", "IS_NULL", "JAVA_CONSTANT", "JOIN", "LE", "LEADING", "LEFT", "LIKE", "LITERAL_by", "LT", "MAX", "MEMBER", "METHOD_CALL", "MIN", "MINUS", "NE", "NEW", "NOT", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NULL", "NUM_DECIMAL", "NUM_DOUBLE", "NUM_FLOAT", "NUM_INT", "NUM_LONG", "OBJECT", "OF", "ON", "OPEN", "OPEN_BRACKET", "OR", "ORDER", "ORDER_ELEMENT", "OUTER", "PARAM", "PLUS", "PROPERTIES", "QUERY", "QUOTED_String", "RANGE", "RIGHT", "ROW_STAR", "SELECT", "SELECT_FROM", "SET", "SKIP", "SOME", "SQL_NE", "STAR", "SUM", "TAKE", "THEN", "TRAILING", "TRUE", "UNARY_MINUS", "UNARY_PLUS", "UNION", "UPDATE", "VECTOR_EXPR", "VERSIONED", "WEIRD_IDENT", "WHEN", "WHERE", "WITH", "WS", "'ascending'", "'descending'", "ALIAS_REF", "BOGUS", "FILTERS", "FROM_FRAGMENT", "IMPLIED_FROM", "JOIN_FRAGMENT", "LEFT_OUTER", "METHOD_NAME", "NAMED_PARAM", "PROPERTY_REF", "RESULT_VARIABLE_REF", "RIGHT_OUTER", "SELECT_CLAUSE", "SELECT_COLUMNS", "SELECT_EXPR", "SQL_TOKEN", "THETA_JOINS"
	};
	public const int EOF=-1;
	public const int AGGREGATE=4;
	public const int ALIAS=5;
	public const int ALL=6;
	public const int AND=7;
	public const int ANY=8;
	public const int AS=9;
	public const int ASCENDING=10;
	public const int AVG=11;
	public const int BAND=12;
	public const int BETWEEN=13;
	public const int BNOT=14;
	public const int BOR=15;
	public const int BOTH=16;
	public const int BXOR=17;
	public const int CASE=18;
	public const int CASE2=19;
	public const int CLASS=20;
	public const int CLOSE=21;
	public const int CLOSE_BRACKET=22;
	public const int COLON=23;
	public const int COMMA=24;
	public const int CONCAT=25;
	public const int CONSTANT=26;
	public const int CONSTRUCTOR=27;
	public const int COUNT=28;
	public const int DELETE=29;
	public const int DESCENDING=30;
	public const int DISTINCT=31;
	public const int DIV=32;
	public const int DOT=33;
	public const int ELEMENTS=34;
	public const int ELSE=35;
	public const int EMPTY=36;
	public const int END=37;
	public const int EQ=38;
	public const int ESCAPE=39;
	public const int ESCqs=40;
	public const int EXISTS=41;
	public const int EXPONENT=42;
	public const int EXPR_LIST=43;
	public const int FALSE=44;
	public const int FETCH=45;
	public const int FILTER_ENTITY=46;
	public const int FLOAT_SUFFIX=47;
	public const int FROM=48;
	public const int FULL=49;
	public const int GE=50;
	public const int GROUP=51;
	public const int GT=52;
	public const int HAVING=53;
	public const int HEX_DIGIT=54;
	public const int IDENT=55;
	public const int ID_LETTER=56;
	public const int ID_START_LETTER=57;
	public const int IN=58;
	public const int INDEX_OP=59;
	public const int INDICES=60;
	public const int INNER=61;
	public const int INSERT=62;
	public const int INTO=63;
	public const int IN_LIST=64;
	public const int IS=65;
	public const int IS_NOT_NULL=66;
	public const int IS_NULL=67;
	public const int JAVA_CONSTANT=68;
	public const int JOIN=69;
	public const int LE=70;
	public const int LEADING=71;
	public const int LEFT=72;
	public const int LIKE=73;
	public const int LITERAL_by=74;
	public const int LT=75;
	public const int MAX=76;
	public const int MEMBER=77;
	public const int METHOD_CALL=78;
	public const int MIN=79;
	public const int MINUS=80;
	public const int NE=81;
	public const int NEW=82;
	public const int NOT=83;
	public const int NOT_BETWEEN=84;
	public const int NOT_IN=85;
	public const int NOT_LIKE=86;
	public const int NULL=87;
	public const int NUM_DECIMAL=88;
	public const int NUM_DOUBLE=89;
	public const int NUM_FLOAT=90;
	public const int NUM_INT=91;
	public const int NUM_LONG=92;
	public const int OBJECT=93;
	public const int OF=94;
	public const int ON=95;
	public const int OPEN=96;
	public const int OPEN_BRACKET=97;
	public const int OR=98;
	public const int ORDER=99;
	public const int ORDER_ELEMENT=100;
	public const int OUTER=101;
	public const int PARAM=102;
	public const int PLUS=103;
	public const int PROPERTIES=104;
	public const int QUERY=105;
	public const int QUOTED_String=106;
	public const int RANGE=107;
	public const int RIGHT=108;
	public const int ROW_STAR=109;
	public const int SELECT=110;
	public const int SELECT_FROM=111;
	public const int SET=112;
	public const int SKIP=113;
	public const int SOME=114;
	public const int SQL_NE=115;
	public const int STAR=116;
	public const int SUM=117;
	public const int TAKE=118;
	public const int THEN=119;
	public const int TRAILING=120;
	public const int TRUE=121;
	public const int UNARY_MINUS=122;
	public const int UNARY_PLUS=123;
	public const int UNION=124;
	public const int UPDATE=125;
	public const int VECTOR_EXPR=126;
	public const int VERSIONED=127;
	public const int WEIRD_IDENT=128;
	public const int WHEN=129;
	public const int WHERE=130;
	public const int WITH=131;
	public const int WS=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int ALIAS_REF=135;
	public const int BOGUS=136;
	public const int FILTERS=137;
	public const int FROM_FRAGMENT=138;
	public const int IMPLIED_FROM=139;
	public const int JOIN_FRAGMENT=140;
	public const int LEFT_OUTER=141;
	public const int METHOD_NAME=142;
	public const int NAMED_PARAM=143;
	public const int PROPERTY_REF=144;
	public const int RESULT_VARIABLE_REF=145;
	public const int RIGHT_OUTER=146;
	public const int SELECT_CLAUSE=147;
	public const int SELECT_COLUMNS=148;
	public const int SELECT_EXPR=149;
	public const int SQL_TOKEN=150;
	public const int THETA_JOINS=151;

	public HqlSqlWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public HqlSqlWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return HqlSqlWalker.tokenNames; } }
	public override string GrammarFileName { get { return "HqlSqlWalker.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// HqlSqlWalker.g:43:8: public statement : ( selectStatement | updateStatement | deleteStatement | insertStatement );
	[GrammarRule("statement")]
	public AstTreeRuleReturnScope<IASTNode, IASTNode> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 1);
		TraceIn("statement", 1);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> selectStatement1 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> updateStatement2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> deleteStatement3 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> insertStatement4 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(43, 1);
		try
		{
			// HqlSqlWalker.g:44:2: ( selectStatement | updateStatement | deleteStatement | insertStatement )
			int alt1=4;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case QUERY:
			case UNION:
				{
				alt1 = 1;
				}
				break;
			case UPDATE:
				{
				alt1 = 2;
				}
				break;
			case DELETE:
				{
				alt1 = 3;
				}
				break;
			case INSERT:
				{
				alt1 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:44:4: selectStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(44, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._selectStatement_in_statement202);
				selectStatement1=selectStatement();
				PopFollow();

				adaptor.AddChild(root_0, selectStatement1.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:44:22: updateStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(44, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._updateStatement_in_statement206);
				updateStatement2=updateStatement();
				PopFollow();

				adaptor.AddChild(root_0, updateStatement2.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:44:40: deleteStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(44, 40);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._deleteStatement_in_statement210);
				deleteStatement3=deleteStatement();
				PopFollow();

				adaptor.AddChild(root_0, deleteStatement3.Tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:44:58: insertStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(44, 58);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._insertStatement_in_statement214);
				insertStatement4=insertStatement();
				PopFollow();

				adaptor.AddChild(root_0, insertStatement4.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 1);
			LeaveRule("statement", 1);
			LeaveRule_statement();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// HqlSqlWalker.g:47:1: selectStatement : query ;
	[GrammarRule("selectStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 2);
		TraceIn("selectStatement", 2);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> query5 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(47, 1);
		try
		{
			// HqlSqlWalker.g:48:2: ( query )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:48:4: query
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(48, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._query_in_selectStatement225);
			query5=query();
			PopFollow();

			adaptor.AddChild(root_0, query5.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectStatement", 2);
			LeaveRule("selectStatement", 2);
			LeaveRule_selectStatement();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_updateStatement();
	partial void LeaveRule_updateStatement();
	// $ANTLR start "updateStatement"
	// HqlSqlWalker.g:54:1: updateStatement : ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? ) -> ^( $u $f $s ( $w)? ) ;
	[GrammarRule("updateStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> updateStatement()
	{
		EnterRule_updateStatement();
		EnterRule("updateStatement", 3);
		TraceIn("updateStatement", 3);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode u = default(IASTNode);
		IASTNode v = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> f = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> s = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> w = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode u_tree = default(IASTNode);
		IASTNode v_tree = default(IASTNode);
		RewriteRuleNodeStream stream_UPDATE=new RewriteRuleNodeStream(adaptor,"token UPDATE");
		RewriteRuleNodeStream stream_VERSIONED=new RewriteRuleNodeStream(adaptor,"token VERSIONED");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_setClause=new RewriteRuleSubtreeStream(adaptor,"rule setClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		try { DebugEnterRule(GrammarFileName, "updateStatement");
		DebugLocation(54, 1);
		try
		{
			// HqlSqlWalker.g:61:2: ( ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? ) -> ^( $u $f $s ( $w)? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:61:4: ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? )
			{
			DebugLocation(61, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(61, 8);

			_last = (IASTNode)input.LT(1);
			u=(IASTNode)Match(input,UPDATE,Follow._UPDATE_in_updateStatement249); 
			 
			stream_UPDATE.Add(u);


			DebugLocation(61, 16);
			 BeforeStatement( "update", UPDATE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(61, 57);
			// HqlSqlWalker.g:61:57: (v= VERSIONED )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==VERSIONED))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:61:58: v= VERSIONED
				{
				DebugLocation(61, 59);

				_last = (IASTNode)input.LT(1);
				v=(IASTNode)Match(input,VERSIONED,Follow._VERSIONED_in_updateStatement256); 
				 
				stream_VERSIONED.Add(v);


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(61, 73);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_updateStatement262);
			f=fromClause();
			PopFollow();

			stream_fromClause.Add(f.Tree);
			DebugLocation(61, 86);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._setClause_in_updateStatement266);
			s=setClause();
			PopFollow();

			stream_setClause.Add(s.Tree);
			DebugLocation(61, 97);
			// HqlSqlWalker.g:61:97: (w= whereClause )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==WHERE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:61:98: w= whereClause
				{
				DebugLocation(61, 99);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_updateStatement271);
				w=whereClause();
				PopFollow();

				stream_whereClause.Add(w.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: u, f, s, w
			// token labels: u
			// rule labels: f, s, w, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_u=new RewriteRuleNodeStream(adaptor,"token u",u);
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.Tree:null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 62:3: -> ^( $u $f $s ( $w)? )
			{
				DebugLocation(62, 6);
				// HqlSqlWalker.g:62:6: ^( $u $f $s ( $w)? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(62, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_u.NextNode(), root_1);

				DebugLocation(62, 12);
				adaptor.AddChild(root_1, stream_f.NextTree());
				DebugLocation(62, 15);
				adaptor.AddChild(root_1, stream_s.NextTree());
				DebugLocation(62, 18);
				// HqlSqlWalker.g:62:18: ( $w)?
				if (stream_w.HasNext)
				{
					DebugLocation(62, 18);
					adaptor.AddChild(root_1, stream_w.NextTree());

				}
				stream_w.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "update" );
					PrepareVersioned( retval.Tree, v );
					PostProcessUpdate( retval.Tree );
					AfterStatementCompletion( "update" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("updateStatement", 3);
			LeaveRule("updateStatement", 3);
			LeaveRule_updateStatement();
		}
		DebugLocation(63, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatement"); }
		return retval;

	}
	// $ANTLR end "updateStatement"

	partial void EnterRule_deleteStatement();
	partial void LeaveRule_deleteStatement();
	// $ANTLR start "deleteStatement"
	// HqlSqlWalker.g:65:1: deleteStatement : ^( DELETE fromClause ( whereClause )? ) ;
	[GrammarRule("deleteStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> deleteStatement()
	{
		EnterRule_deleteStatement();
		EnterRule("deleteStatement", 4);
		TraceIn("deleteStatement", 4);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode DELETE6 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> fromClause7 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> whereClause8 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode DELETE6_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "deleteStatement");
		DebugLocation(65, 1);
		try
		{
			// HqlSqlWalker.g:71:2: ( ^( DELETE fromClause ( whereClause )? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:71:4: ^( DELETE fromClause ( whereClause )? )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(71, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(71, 7);

			_last = (IASTNode)input.LT(1);
			DELETE6=(IASTNode)Match(input,DELETE,Follow._DELETE_in_deleteStatement314); 
			DELETE6_tree = (IASTNode)adaptor.DupNode(DELETE6);


			root_1 = (IASTNode)adaptor.BecomeRoot(DELETE6_tree, root_1);


			DebugLocation(71, 14);
			 BeforeStatement( "delete", DELETE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(71, 55);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_deleteStatement318);
			fromClause7=fromClause();
			PopFollow();

			adaptor.AddChild(root_1, fromClause7.Tree);

			DebugLocation(71, 66);
			// HqlSqlWalker.g:71:66: ( whereClause )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==WHERE))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:71:67: whereClause
				{
				DebugLocation(71, 67);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_deleteStatement321);
				whereClause8=whereClause();
				PopFollow();

				adaptor.AddChild(root_1, whereClause8.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "delete" );
					PostProcessDelete( retval.Tree );
					AfterStatementCompletion( "delete" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("deleteStatement", 4);
			LeaveRule("deleteStatement", 4);
			LeaveRule_deleteStatement();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "deleteStatement"); }
		return retval;

	}
	// $ANTLR end "deleteStatement"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// HqlSqlWalker.g:74:1: insertStatement : ^( INSERT intoClause query ) ;
	[GrammarRule("insertStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 5);
		TraceIn("insertStatement", 5);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode INSERT9 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> intoClause10 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query11 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode INSERT9_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(74, 1);
		try
		{
			// HqlSqlWalker.g:83:2: ( ^( INSERT intoClause query ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:83:4: ^( INSERT intoClause query )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(83, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(83, 7);

			_last = (IASTNode)input.LT(1);
			INSERT9=(IASTNode)Match(input,INSERT,Follow._INSERT_in_insertStatement351); 
			INSERT9_tree = (IASTNode)adaptor.DupNode(INSERT9);


			root_1 = (IASTNode)adaptor.BecomeRoot(INSERT9_tree, root_1);


			DebugLocation(83, 14);
			 BeforeStatement( "insert", INSERT ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(83, 55);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._intoClause_in_insertStatement355);
			intoClause10=intoClause();
			PopFollow();

			adaptor.AddChild(root_1, intoClause10.Tree);

			DebugLocation(83, 66);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._query_in_insertStatement357);
			query11=query();
			PopFollow();

			adaptor.AddChild(root_1, query11.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "insert" );
					PostProcessInsert( retval.Tree );
					AfterStatementCompletion( "insert" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("insertStatement", 5);
			LeaveRule("insertStatement", 5);
			LeaveRule_insertStatement();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_intoClause();
	partial void LeaveRule_intoClause();
	// $ANTLR start "intoClause"
	// HqlSqlWalker.g:86:1: intoClause : ^( INTO (p= path ) ps= insertablePropertySpec ) ;
	[GrammarRule("intoClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> intoClause()
	{
		EnterRule_intoClause();
		EnterRule("intoClause", 6);
		TraceIn("intoClause", 6);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode INTO12 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ps = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode INTO12_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "intoClause");
		DebugLocation(86, 1);
		try
		{
			// HqlSqlWalker.g:90:2: ( ^( INTO (p= path ) ps= insertablePropertySpec ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:90:4: ^( INTO (p= path ) ps= insertablePropertySpec )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(90, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(90, 7);

			_last = (IASTNode)input.LT(1);
			INTO12=(IASTNode)Match(input,INTO,Follow._INTO_in_intoClause381); 
			INTO12_tree = (IASTNode)adaptor.DupNode(INTO12);


			root_1 = (IASTNode)adaptor.BecomeRoot(INTO12_tree, root_1);


			DebugLocation(90, 12);
			 HandleClauseStart( INTO ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(90, 43);
			// HqlSqlWalker.g:90:43: (p= path )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:90:44: p= path
			{
			DebugLocation(90, 45);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_intoClause388);
			p=path();
			PopFollow();

			adaptor.AddChild(root_1, p.Tree);


			}

			DebugLocation(90, 54);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._insertablePropertySpec_in_intoClause393);
			ps=insertablePropertySpec();
			PopFollow();

			adaptor.AddChild(root_1, ps.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					retval.Tree =  CreateIntoClause((p!=null?((HqlSqlWalker.path_return)p).p:default(String)), (ps!=null?((IASTNode)ps.Tree):default(IASTNode)));
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("intoClause", 6);
			LeaveRule("intoClause", 6);
			LeaveRule_intoClause();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "intoClause"); }
		return retval;

	}
	// $ANTLR end "intoClause"

	partial void EnterRule_insertablePropertySpec();
	partial void LeaveRule_insertablePropertySpec();
	// $ANTLR start "insertablePropertySpec"
	// HqlSqlWalker.g:93:1: insertablePropertySpec : ^( RANGE ( IDENT )+ ) ;
	[GrammarRule("insertablePropertySpec")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> insertablePropertySpec()
	{
		EnterRule_insertablePropertySpec();
		EnterRule("insertablePropertySpec", 7);
		TraceIn("insertablePropertySpec", 7);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode RANGE13 = default(IASTNode);
		IASTNode IDENT14 = default(IASTNode);

		IASTNode RANGE13_tree = default(IASTNode);
		IASTNode IDENT14_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "insertablePropertySpec");
		DebugLocation(93, 1);
		try
		{
			// HqlSqlWalker.g:94:2: ( ^( RANGE ( IDENT )+ ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:94:4: ^( RANGE ( IDENT )+ )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(94, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(94, 7);

			_last = (IASTNode)input.LT(1);
			RANGE13=(IASTNode)Match(input,RANGE,Follow._RANGE_in_insertablePropertySpec409); 
			RANGE13_tree = (IASTNode)adaptor.DupNode(RANGE13);


			root_1 = (IASTNode)adaptor.BecomeRoot(RANGE13_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(94, 13);
			// HqlSqlWalker.g:94:13: ( IDENT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==IDENT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:94:14: IDENT
					{
					DebugLocation(94, 14);

					_last = (IASTNode)input.LT(1);
					IDENT14=(IASTNode)Match(input,IDENT,Follow._IDENT_in_insertablePropertySpec412); 
					IDENT14_tree = (IASTNode)adaptor.DupNode(IDENT14);


					adaptor.AddChild(root_1, IDENT14_tree);


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("insertablePropertySpec", 7);
			LeaveRule("insertablePropertySpec", 7);
			LeaveRule_insertablePropertySpec();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "insertablePropertySpec"); }
		return retval;

	}
	// $ANTLR end "insertablePropertySpec"

	partial void EnterRule_setClause();
	partial void LeaveRule_setClause();
	// $ANTLR start "setClause"
	// HqlSqlWalker.g:97:1: setClause : ^( SET ( assignment )* ) ;
	[GrammarRule("setClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> setClause()
	{
		EnterRule_setClause();
		EnterRule("setClause", 8);
		TraceIn("setClause", 8);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode SET15 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> assignment16 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode SET15_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "setClause");
		DebugLocation(97, 1);
		try
		{
			// HqlSqlWalker.g:98:2: ( ^( SET ( assignment )* ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:98:4: ^( SET ( assignment )* )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(98, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(98, 7);

			_last = (IASTNode)input.LT(1);
			SET15=(IASTNode)Match(input,SET,Follow._SET_in_setClause429); 
			SET15_tree = (IASTNode)adaptor.DupNode(SET15);


			root_1 = (IASTNode)adaptor.BecomeRoot(SET15_tree, root_1);


			DebugLocation(98, 11);
			 HandleClauseStart( SET ); 

			if (input.LA(1) == TokenTypes.Down) {
				Match(input, TokenTypes.Down, null); 
				DebugLocation(98, 41);
				// HqlSqlWalker.g:98:41: ( assignment )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if ((LA6_1==EQ))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:98:42: assignment
						{
						DebugLocation(98, 42);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._assignment_in_setClause434);
						assignment16=assignment();
						PopFollow();

						adaptor.AddChild(root_1, assignment16.Tree);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 
			}
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("setClause", 8);
			LeaveRule("setClause", 8);
			LeaveRule_setClause();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "setClause"); }
		return retval;

	}
	// $ANTLR end "setClause"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// HqlSqlWalker.g:101:1: assignment : ^( EQ (p= propertyRef ) ( newValue ) ) ;
	[GrammarRule("assignment")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 9);
		TraceIn("assignment", 9);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode EQ17 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> newValue18 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode EQ17_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(101, 1);
		try
		{
			// HqlSqlWalker.g:107:2: ( ^( EQ (p= propertyRef ) ( newValue ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:107:4: ^( EQ (p= propertyRef ) ( newValue ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(107, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(107, 7);

			_last = (IASTNode)input.LT(1);
			EQ17=(IASTNode)Match(input,EQ,Follow._EQ_in_assignment461); 
			EQ17_tree = (IASTNode)adaptor.DupNode(EQ17);


			root_1 = (IASTNode)adaptor.BecomeRoot(EQ17_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(107, 10);
			// HqlSqlWalker.g:107:10: (p= propertyRef )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:107:11: p= propertyRef
			{
			DebugLocation(107, 12);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_assignment466);
			p=propertyRef();
			PopFollow();

			adaptor.AddChild(root_1, p.Tree);


			}

			DebugLocation(107, 26);
			 Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode))); 
			DebugLocation(107, 48);
			// HqlSqlWalker.g:107:48: ( newValue )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:107:49: newValue
			{
			DebugLocation(107, 49);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._newValue_in_assignment472);
			newValue18=newValue();
			PopFollow();

			adaptor.AddChild(root_1, newValue18.Tree);


			}


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					EvaluateAssignment( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignment", 9);
			LeaveRule("assignment", 9);
			LeaveRule_assignment();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_newValue();
	partial void LeaveRule_newValue();
	// $ANTLR start "newValue"
	// HqlSqlWalker.g:111:1: newValue : ( expr | query );
	[GrammarRule("newValue")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> newValue()
	{
		EnterRule_newValue();
		EnterRule("newValue", 10);
		TraceIn("newValue", 10);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> expr19 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query20 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "newValue");
		DebugLocation(111, 1);
		try
		{
			// HqlSqlWalker.g:112:2: ( expr | query )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==AGGREGATE||LA7_1==BAND||(LA7_1>=BNOT && LA7_1<=BOR)||(LA7_1>=BXOR && LA7_1<=CASE2)||LA7_1==COLON||LA7_1==COUNT||(LA7_1>=DIV && LA7_1<=DOT)||LA7_1==FALSE||LA7_1==IDENT||LA7_1==INDEX_OP||LA7_1==JAVA_CONSTANT||LA7_1==METHOD_CALL||LA7_1==MINUS||(LA7_1>=NULL && LA7_1<=NUM_LONG)||(LA7_1>=PARAM && LA7_1<=PLUS)||LA7_1==QUOTED_String||LA7_1==STAR||(LA7_1>=TRUE && LA7_1<=UNARY_MINUS)||LA7_1==VECTOR_EXPR||LA7_1==WEIRD_IDENT))
			{
				alt7 = 1;
			}
			else if ((LA7_1==QUERY||LA7_1==UNION))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:112:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(112, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_newValue488);
				expr19=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr19.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:112:11: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(112, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_newValue492);
				query20=query();
				PopFollow();

				adaptor.AddChild(root_0, query20.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newValue", 10);
			LeaveRule("newValue", 10);
			LeaveRule_newValue();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "newValue"); }
		return retval;

	}
	// $ANTLR end "newValue"

	partial void EnterRule_query();
	partial void LeaveRule_query();
	// $ANTLR start "query"
	// HqlSqlWalker.g:115:1: query : ( unionedQuery | ^( UNION unionedQuery query ) );
	[GrammarRule("query")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> query()
	{
		EnterRule_query();
		EnterRule("query", 11);
		TraceIn("query", 11);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode UNION22 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery21 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery23 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query24 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode UNION22_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "query");
		DebugLocation(115, 1);
		try
		{
			// HqlSqlWalker.g:116:2: ( unionedQuery | ^( UNION unionedQuery query ) )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==QUERY))
			{
				alt8 = 1;
			}
			else if ((LA8_1==UNION))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:116:4: unionedQuery
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(116, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._unionedQuery_in_query503);
				unionedQuery21=unionedQuery();
				PopFollow();

				adaptor.AddChild(root_0, unionedQuery21.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:117:4: ^( UNION unionedQuery query )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(117, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(117, 6);

				_last = (IASTNode)input.LT(1);
				UNION22=(IASTNode)Match(input,UNION,Follow._UNION_in_query510); 
				UNION22_tree = (IASTNode)adaptor.DupNode(UNION22);


				root_1 = (IASTNode)adaptor.BecomeRoot(UNION22_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(117, 12);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._unionedQuery_in_query512);
				unionedQuery23=unionedQuery();
				PopFollow();

				adaptor.AddChild(root_1, unionedQuery23.Tree);

				DebugLocation(117, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_query514);
				query24=query();
				PopFollow();

				adaptor.AddChild(root_1, query24.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("query", 11);
			LeaveRule("query", 11);
			LeaveRule_query();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "query"); }
		return retval;

	}
	// $ANTLR end "query"

	partial void EnterRule_unionedQuery();
	partial void LeaveRule_unionedQuery();
	// $ANTLR start "unionedQuery"
	// HqlSqlWalker.g:122:1: unionedQuery : ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? ) -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? ) ;
	[GrammarRule("unionedQuery")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery()
	{
		EnterRule_unionedQuery();
		EnterRule("unionedQuery", 12);
		TraceIn("unionedQuery", 12);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode QUERY25 = default(IASTNode);
		IASTNode SELECT_FROM26 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> f = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> s = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> w = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> g = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> h = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> o = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> sk = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> tk = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode QUERY25_tree = default(IASTNode);
		IASTNode SELECT_FROM26_tree = default(IASTNode);
		RewriteRuleNodeStream stream_QUERY=new RewriteRuleNodeStream(adaptor,"token QUERY");
		RewriteRuleNodeStream stream_SELECT_FROM=new RewriteRuleNodeStream(adaptor,"token SELECT_FROM");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
		RewriteRuleSubtreeStream stream_skipClause=new RewriteRuleSubtreeStream(adaptor,"rule skipClause");
		RewriteRuleSubtreeStream stream_takeClause=new RewriteRuleSubtreeStream(adaptor,"rule takeClause");
		try { DebugEnterRule(GrammarFileName, "unionedQuery");
		DebugLocation(122, 1);
		try
		{
			// HqlSqlWalker.g:129:2: ( ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? ) -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:129:4: ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? )
			{
			DebugLocation(129, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(129, 7);

			_last = (IASTNode)input.LT(1);
			QUERY25=(IASTNode)Match(input,QUERY,Follow._QUERY_in_unionedQuery537); 
			 
			stream_QUERY.Add(QUERY25);


			DebugLocation(129, 13);
			 BeforeStatement( "select", SELECT ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(131, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_2 = _last;
			IASTNode _first_2 = default(IASTNode);
			IASTNode root_2 = (IASTNode)adaptor.Nil();
			DebugLocation(131, 6);

			_last = (IASTNode)input.LT(1);
			SELECT_FROM26=(IASTNode)Match(input,SELECT_FROM,Follow._SELECT_FROM_in_unionedQuery549); 
			 
			stream_SELECT_FROM.Add(SELECT_FROM26);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(132, 6);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_unionedQuery557);
			f=fromClause();
			PopFollow();

			stream_fromClause.Add(f.Tree);
			DebugLocation(133, 5);
			// HqlSqlWalker.g:133:5: (s= selectClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==SELECT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:133:6: s= selectClause
				{
				DebugLocation(133, 7);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._selectClause_in_unionedQuery566);
				s=selectClause();
				PopFollow();

				stream_selectClause.Add(s.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_1, root_2);
			_last = _save_last_2;
			}

			DebugLocation(135, 4);
			// HqlSqlWalker.g:135:4: (w= whereClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==WHERE))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:135:5: w= whereClause
				{
				DebugLocation(135, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_unionedQuery581);
				w=whereClause();
				PopFollow();

				stream_whereClause.Add(w.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(136, 4);
			// HqlSqlWalker.g:136:4: (g= groupClause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==GROUP))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:136:5: g= groupClause
				{
				DebugLocation(136, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._groupClause_in_unionedQuery591);
				g=groupClause();
				PopFollow();

				stream_groupClause.Add(g.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(137, 4);
			// HqlSqlWalker.g:137:4: (h= havingClause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==HAVING))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:137:5: h= havingClause
				{
				DebugLocation(137, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._havingClause_in_unionedQuery601);
				h=havingClause();
				PopFollow();

				stream_havingClause.Add(h.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(138, 4);
			// HqlSqlWalker.g:138:4: (o= orderClause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==ORDER))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:138:5: o= orderClause
				{
				DebugLocation(138, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderClause_in_unionedQuery611);
				o=orderClause();
				PopFollow();

				stream_orderClause.Add(o.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(139, 4);
			// HqlSqlWalker.g:139:4: (sk= skipClause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==SKIP))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:139:5: sk= skipClause
				{
				DebugLocation(139, 7);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._skipClause_in_unionedQuery621);
				sk=skipClause();
				PopFollow();

				stream_skipClause.Add(sk.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(140, 4);
			// HqlSqlWalker.g:140:4: (tk= takeClause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==TAKE))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:140:5: tk= takeClause
				{
				DebugLocation(140, 7);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._takeClause_in_unionedQuery631);
				tk=takeClause();
				PopFollow();

				stream_takeClause.Add(tk.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: s, f, w, g, h, o, sk, tk
			// token labels: 
			// rule labels: s, f, w, g, h, o, sk, tk, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.Tree:null);
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.Tree:null);
			RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.Tree:null);
			RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.Tree:null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.Tree:null);
			RewriteRuleSubtreeStream stream_sk=new RewriteRuleSubtreeStream(adaptor,"rule sk",sk!=null?sk.Tree:null);
			RewriteRuleSubtreeStream stream_tk=new RewriteRuleSubtreeStream(adaptor,"rule tk",tk!=null?tk.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 142:2: -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? )
			{
				DebugLocation(142, 5);
				// HqlSqlWalker.g:142:5: ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(142, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT, "SELECT"), root_1);

				DebugLocation(142, 15);
				// HqlSqlWalker.g:142:15: ( $s)?
				if (stream_s.HasNext)
				{
					DebugLocation(142, 15);
					adaptor.AddChild(root_1, stream_s.NextTree());

				}
				stream_s.Reset();
				DebugLocation(142, 19);
				adaptor.AddChild(root_1, stream_f.NextTree());
				DebugLocation(142, 22);
				// HqlSqlWalker.g:142:22: ( $w)?
				if (stream_w.HasNext)
				{
					DebugLocation(142, 22);
					adaptor.AddChild(root_1, stream_w.NextTree());

				}
				stream_w.Reset();
				DebugLocation(142, 26);
				// HqlSqlWalker.g:142:26: ( $g)?
				if (stream_g.HasNext)
				{
					DebugLocation(142, 26);
					adaptor.AddChild(root_1, stream_g.NextTree());

				}
				stream_g.Reset();
				DebugLocation(142, 30);
				// HqlSqlWalker.g:142:30: ( $h)?
				if (stream_h.HasNext)
				{
					DebugLocation(142, 30);
					adaptor.AddChild(root_1, stream_h.NextTree());

				}
				stream_h.Reset();
				DebugLocation(142, 34);
				// HqlSqlWalker.g:142:34: ( $o)?
				if (stream_o.HasNext)
				{
					DebugLocation(142, 34);
					adaptor.AddChild(root_1, stream_o.NextTree());

				}
				stream_o.Reset();
				DebugLocation(142, 38);
				// HqlSqlWalker.g:142:38: ( $sk)?
				if (stream_sk.HasNext)
				{
					DebugLocation(142, 38);
					adaptor.AddChild(root_1, stream_sk.NextTree());

				}
				stream_sk.Reset();
				DebugLocation(142, 43);
				// HqlSqlWalker.g:142:43: ( $tk)?
				if (stream_tk.HasNext)
				{
					DebugLocation(142, 43);
					adaptor.AddChild(root_1, stream_tk.NextTree());

				}
				stream_tk.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					// Antlr note: #x_in refers to the input AST, #x refers to the output AST
					BeforeStatementCompletion( "select" );
					ProcessQuery( (s!=null?((IASTNode)s.Tree):default(IASTNode)), retval.Tree );
					AfterStatementCompletion( "select" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unionedQuery", 12);
			LeaveRule("unionedQuery", 12);
			LeaveRule_unionedQuery();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "unionedQuery"); }
		return retval;

	}
	// $ANTLR end "unionedQuery"

	partial void EnterRule_orderClause();
	partial void LeaveRule_orderClause();
	// $ANTLR start "orderClause"
	// HqlSqlWalker.g:145:1: orderClause : ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) ) ;
	[GrammarRule("orderClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> orderClause()
	{
		EnterRule_orderClause();
		EnterRule("orderClause", 13);
		TraceIn("orderClause", 13);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode ORDER27 = default(IASTNode);
		IASTNode set30 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs28 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query29 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode ORDER27_tree = default(IASTNode);
		IASTNode set30_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "orderClause");
		DebugLocation(145, 1);
		try
		{
			// HqlSqlWalker.g:146:2: ( ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:146:4: ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(146, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(146, 6);

			_last = (IASTNode)input.LT(1);
			ORDER27=(IASTNode)Match(input,ORDER,Follow._ORDER_in_orderClause688); 
			ORDER27_tree = (IASTNode)adaptor.DupNode(ORDER27);


			root_1 = (IASTNode)adaptor.BecomeRoot(ORDER27_tree, root_1);


			DebugLocation(146, 12);
			 HandleClauseStart( ORDER ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(146, 44);
			// HqlSqlWalker.g:146:44: ( orderExprs | query ( ASCENDING | DESCENDING )? )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==AGGREGATE||LA17_1==BAND||(LA17_1>=BNOT && LA17_1<=BOR)||(LA17_1>=BXOR && LA17_1<=CASE2)||LA17_1==COLON||LA17_1==COUNT||(LA17_1>=DIV && LA17_1<=DOT)||LA17_1==FALSE||LA17_1==IDENT||LA17_1==INDEX_OP||LA17_1==JAVA_CONSTANT||LA17_1==METHOD_CALL||LA17_1==MINUS||(LA17_1>=NULL && LA17_1<=NUM_LONG)||(LA17_1>=PARAM && LA17_1<=PLUS)||LA17_1==QUOTED_String||LA17_1==STAR||(LA17_1>=TRUE && LA17_1<=UNARY_MINUS)||LA17_1==VECTOR_EXPR||LA17_1==WEIRD_IDENT))
			{
				alt17 = 1;
			}
			else if ((LA17_1==QUERY||LA17_1==UNION))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:146:45: orderExprs
				{
				DebugLocation(146, 45);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderExprs_in_orderClause693);
				orderExprs28=orderExprs();
				PopFollow();

				adaptor.AddChild(root_1, orderExprs28.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:146:58: query ( ASCENDING | DESCENDING )?
				{
				DebugLocation(146, 58);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_orderClause697);
				query29=query();
				PopFollow();

				adaptor.AddChild(root_1, query29.Tree);

				DebugLocation(146, 64);
				// HqlSqlWalker.g:146:64: ( ASCENDING | DESCENDING )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==ASCENDING||LA16_1==DESCENDING))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:
					{
					DebugLocation(146, 64);

					_last = (IASTNode)input.LT(1);
					set30=(IASTNode)input.LT(1);
					if (input.LA(1)==ASCENDING||input.LA(1)==DESCENDING)
					{
						input.Consume();
						set30_tree = (IASTNode)adaptor.DupNode(set30);


						adaptor.AddChild(root_1, set30_tree);

						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}



					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orderClause", 13);
			LeaveRule("orderClause", 13);
			LeaveRule_orderClause();
		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "orderClause"); }
		return retval;

	}
	// $ANTLR end "orderClause"

	partial void EnterRule_orderExprs();
	partial void LeaveRule_orderExprs();
	// $ANTLR start "orderExprs"
	// HqlSqlWalker.g:149:1: orderExprs : orderExpr ( ASCENDING | DESCENDING )? ( orderExprs )? ;
	[GrammarRule("orderExprs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs()
	{
		EnterRule_orderExprs();
		EnterRule("orderExprs", 14);
		TraceIn("orderExprs", 14);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode set32 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> orderExpr31 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs33 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode set32_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "orderExprs");
		DebugLocation(149, 1);
		try
		{
			// HqlSqlWalker.g:150:2: ( orderExpr ( ASCENDING | DESCENDING )? ( orderExprs )? )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:150:4: orderExpr ( ASCENDING | DESCENDING )? ( orderExprs )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(150, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._orderExpr_in_orderExprs720);
			orderExpr31=orderExpr();
			PopFollow();

			adaptor.AddChild(root_0, orderExpr31.Tree);

			DebugLocation(150, 14);
			// HqlSqlWalker.g:150:14: ( ASCENDING | DESCENDING )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==ASCENDING||LA18_1==DESCENDING))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:
				{
				DebugLocation(150, 14);

				_last = (IASTNode)input.LT(1);
				set32=(IASTNode)input.LT(1);
				if (input.LA(1)==ASCENDING||input.LA(1)==DESCENDING)
				{
					input.Consume();
					set32_tree = (IASTNode)adaptor.DupNode(set32);


					adaptor.AddChild(root_0, set32_tree);

					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}



				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(150, 42);
			// HqlSqlWalker.g:150:42: ( orderExprs )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==AGGREGATE||LA19_1==BAND||(LA19_1>=BNOT && LA19_1<=BOR)||(LA19_1>=BXOR && LA19_1<=CASE2)||LA19_1==COLON||LA19_1==COUNT||(LA19_1>=DIV && LA19_1<=DOT)||LA19_1==FALSE||LA19_1==IDENT||LA19_1==INDEX_OP||LA19_1==JAVA_CONSTANT||LA19_1==METHOD_CALL||LA19_1==MINUS||(LA19_1>=NULL && LA19_1<=NUM_LONG)||(LA19_1>=PARAM && LA19_1<=PLUS)||LA19_1==QUOTED_String||LA19_1==STAR||(LA19_1>=TRUE && LA19_1<=UNARY_MINUS)||LA19_1==VECTOR_EXPR||LA19_1==WEIRD_IDENT))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:150:43: orderExprs
				{
				DebugLocation(150, 43);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderExprs_in_orderExprs734);
				orderExprs33=orderExprs();
				PopFollow();

				adaptor.AddChild(root_0, orderExprs33.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orderExprs", 14);
			LeaveRule("orderExprs", 14);
			LeaveRule_orderExprs();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "orderExprs"); }
		return retval;

	}
	// $ANTLR end "orderExprs"

	partial void EnterRule_orderExpr();
	partial void LeaveRule_orderExpr();
	// $ANTLR start "orderExpr"
	// HqlSqlWalker.g:153:1: orderExpr : ({...}? resultVariableRef | expr );
	[GrammarRule("orderExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> orderExpr()
	{
		EnterRule_orderExpr();
		EnterRule("orderExpr", 15);
		TraceIn("orderExpr", 15);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> resultVariableRef34 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr35 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "orderExpr");
		DebugLocation(153, 1);
		try
		{
			// HqlSqlWalker.g:154:2: ({...}? resultVariableRef | expr )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==IDENT||LA20_1==WEIRD_IDENT))
			{
				int LA20_2 = input.LA(2);

				if ((( IsOrderExpressionResultVariableRef( (IASTNode) input.LT(1) ) )))
				{
					alt20 = 1;
				}
				else if ((true))
				{
					alt20 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA20_1==AGGREGATE||LA20_1==BAND||(LA20_1>=BNOT && LA20_1<=BOR)||(LA20_1>=BXOR && LA20_1<=CASE2)||LA20_1==COLON||LA20_1==COUNT||(LA20_1>=DIV && LA20_1<=DOT)||LA20_1==FALSE||LA20_1==INDEX_OP||LA20_1==JAVA_CONSTANT||LA20_1==METHOD_CALL||LA20_1==MINUS||(LA20_1>=NULL && LA20_1<=NUM_LONG)||(LA20_1>=PARAM && LA20_1<=PLUS)||LA20_1==QUOTED_String||LA20_1==STAR||(LA20_1>=TRUE && LA20_1<=UNARY_MINUS)||LA20_1==VECTOR_EXPR))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:154:4: {...}? resultVariableRef
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(154, 4);
				if (!(( IsOrderExpressionResultVariableRef( (IASTNode) input.LT(1) ) )))
				{
					throw new FailedPredicateException(input, "orderExpr", " IsOrderExpressionResultVariableRef( (IASTNode) input.LT(1) ) ");
				}
				DebugLocation(154, 70);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._resultVariableRef_in_orderExpr749);
				resultVariableRef34=resultVariableRef();
				PopFollow();

				adaptor.AddChild(root_0, resultVariableRef34.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:155:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(155, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_orderExpr754);
				expr35=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr35.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orderExpr", 15);
			LeaveRule("orderExpr", 15);
			LeaveRule_orderExpr();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "orderExpr"); }
		return retval;

	}
	// $ANTLR end "orderExpr"

	partial void EnterRule_resultVariableRef();
	partial void LeaveRule_resultVariableRef();
	// $ANTLR start "resultVariableRef"
	// HqlSqlWalker.g:158:1: resultVariableRef : i= identifier -> ^( RESULT_VARIABLE_REF[$i.start.ToString()] ) ;
	[GrammarRule("resultVariableRef")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> resultVariableRef()
	{
		EnterRule_resultVariableRef();
		EnterRule("resultVariableRef", 16);
		TraceIn("resultVariableRef", 16);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> i = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "resultVariableRef");
		DebugLocation(158, 1);
		try
		{
			// HqlSqlWalker.g:162:2: (i= identifier -> ^( RESULT_VARIABLE_REF[$i.start.ToString()] ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:162:4: i= identifier
			{
			DebugLocation(162, 5);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_resultVariableRef774);
			i=identifier();
			PopFollow();

			stream_identifier.Add(i.Tree);


			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 163:2: -> ^( RESULT_VARIABLE_REF[$i.start.ToString()] )
			{
				DebugLocation(163, 5);
				// HqlSqlWalker.g:163:5: ^( RESULT_VARIABLE_REF[$i.start.ToString()] )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(163, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(RESULT_VARIABLE_REF, (i!=null?((IASTNode)i.Start):default(IASTNode)).ToString()), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					HandleResultVariableRef( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("resultVariableRef", 16);
			LeaveRule("resultVariableRef", 16);
			LeaveRule_resultVariableRef();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "resultVariableRef"); }
		return retval;

	}
	// $ANTLR end "resultVariableRef"

	partial void EnterRule_skipClause();
	partial void LeaveRule_skipClause();
	// $ANTLR start "skipClause"
	// HqlSqlWalker.g:166:1: skipClause : ^( SKIP ( NUM_INT | parameter ) ) ;
	[GrammarRule("skipClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> skipClause()
	{
		EnterRule_skipClause();
		EnterRule("skipClause", 17);
		TraceIn("skipClause", 17);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode SKIP36 = default(IASTNode);
		IASTNode NUM_INT37 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter38 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode SKIP36_tree = default(IASTNode);
		IASTNode NUM_INT37_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "skipClause");
		DebugLocation(166, 1);
		try
		{
			// HqlSqlWalker.g:167:2: ( ^( SKIP ( NUM_INT | parameter ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:167:4: ^( SKIP ( NUM_INT | parameter ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(167, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(167, 6);

			_last = (IASTNode)input.LT(1);
			SKIP36=(IASTNode)Match(input,SKIP,Follow._SKIP_in_skipClause796); 
			SKIP36_tree = (IASTNode)adaptor.DupNode(SKIP36);


			root_1 = (IASTNode)adaptor.BecomeRoot(SKIP36_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(167, 11);
			// HqlSqlWalker.g:167:11: ( NUM_INT | parameter )
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==NUM_INT))
			{
				alt21 = 1;
			}
			else if ((LA21_1==COLON||LA21_1==PARAM))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:167:12: NUM_INT
				{
				DebugLocation(167, 12);

				_last = (IASTNode)input.LT(1);
				NUM_INT37=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_skipClause799); 
				NUM_INT37_tree = (IASTNode)adaptor.DupNode(NUM_INT37);


				adaptor.AddChild(root_1, NUM_INT37_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:167:22: parameter
				{
				DebugLocation(167, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_skipClause803);
				parameter38=parameter();
				PopFollow();

				adaptor.AddChild(root_1, parameter38.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("skipClause", 17);
			LeaveRule("skipClause", 17);
			LeaveRule_skipClause();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "skipClause"); }
		return retval;

	}
	// $ANTLR end "skipClause"

	partial void EnterRule_takeClause();
	partial void LeaveRule_takeClause();
	// $ANTLR start "takeClause"
	// HqlSqlWalker.g:170:1: takeClause : ^( TAKE ( NUM_INT | parameter ) ) ;
	[GrammarRule("takeClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> takeClause()
	{
		EnterRule_takeClause();
		EnterRule("takeClause", 18);
		TraceIn("takeClause", 18);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode TAKE39 = default(IASTNode);
		IASTNode NUM_INT40 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter41 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode TAKE39_tree = default(IASTNode);
		IASTNode NUM_INT40_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "takeClause");
		DebugLocation(170, 1);
		try
		{
			// HqlSqlWalker.g:171:2: ( ^( TAKE ( NUM_INT | parameter ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:171:4: ^( TAKE ( NUM_INT | parameter ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(171, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(171, 6);

			_last = (IASTNode)input.LT(1);
			TAKE39=(IASTNode)Match(input,TAKE,Follow._TAKE_in_takeClause817); 
			TAKE39_tree = (IASTNode)adaptor.DupNode(TAKE39);


			root_1 = (IASTNode)adaptor.BecomeRoot(TAKE39_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(171, 11);
			// HqlSqlWalker.g:171:11: ( NUM_INT | parameter )
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==NUM_INT))
			{
				alt22 = 1;
			}
			else if ((LA22_1==COLON||LA22_1==PARAM))
			{
				alt22 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:171:12: NUM_INT
				{
				DebugLocation(171, 12);

				_last = (IASTNode)input.LT(1);
				NUM_INT40=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_takeClause820); 
				NUM_INT40_tree = (IASTNode)adaptor.DupNode(NUM_INT40);


				adaptor.AddChild(root_1, NUM_INT40_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:171:22: parameter
				{
				DebugLocation(171, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_takeClause824);
				parameter41=parameter();
				PopFollow();

				adaptor.AddChild(root_1, parameter41.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("takeClause", 18);
			LeaveRule("takeClause", 18);
			LeaveRule_takeClause();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "takeClause"); }
		return retval;

	}
	// $ANTLR end "takeClause"

	partial void EnterRule_groupClause();
	partial void LeaveRule_groupClause();
	// $ANTLR start "groupClause"
	// HqlSqlWalker.g:174:1: groupClause : ^( GROUP ( expr )+ ) ;
	[GrammarRule("groupClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> groupClause()
	{
		EnterRule_groupClause();
		EnterRule("groupClause", 19);
		TraceIn("groupClause", 19);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode GROUP42 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr43 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode GROUP42_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "groupClause");
		DebugLocation(174, 1);
		try
		{
			// HqlSqlWalker.g:175:2: ( ^( GROUP ( expr )+ ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:175:4: ^( GROUP ( expr )+ )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(175, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(175, 6);

			_last = (IASTNode)input.LT(1);
			GROUP42=(IASTNode)Match(input,GROUP,Follow._GROUP_in_groupClause838); 
			GROUP42_tree = (IASTNode)adaptor.DupNode(GROUP42);


			root_1 = (IASTNode)adaptor.BecomeRoot(GROUP42_tree, root_1);


			DebugLocation(175, 12);
			 HandleClauseStart( GROUP ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(175, 44);
			// HqlSqlWalker.g:175:44: ( expr )+
			int cnt23=0;
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==AGGREGATE||LA23_1==BAND||(LA23_1>=BNOT && LA23_1<=BOR)||(LA23_1>=BXOR && LA23_1<=CASE2)||LA23_1==COLON||LA23_1==COUNT||(LA23_1>=DIV && LA23_1<=DOT)||LA23_1==FALSE||LA23_1==IDENT||LA23_1==INDEX_OP||LA23_1==JAVA_CONSTANT||LA23_1==METHOD_CALL||LA23_1==MINUS||(LA23_1>=NULL && LA23_1<=NUM_LONG)||(LA23_1>=PARAM && LA23_1<=PLUS)||LA23_1==QUOTED_String||LA23_1==STAR||(LA23_1>=TRUE && LA23_1<=UNARY_MINUS)||LA23_1==VECTOR_EXPR||LA23_1==WEIRD_IDENT))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:175:45: expr
					{
					DebugLocation(175, 45);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_groupClause843);
					expr43=expr();
					PopFollow();

					adaptor.AddChild(root_1, expr43.Tree);


					}
					break;

				default:
					if (cnt23 >= 1)
						goto loop23;

					EarlyExitException eee23 = new EarlyExitException( 23, input );
					DebugRecognitionException(eee23);
					throw eee23;
				}
				cnt23++;
			}
			loop23:
				;

			} finally { DebugExitSubRule(23); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("groupClause", 19);
			LeaveRule("groupClause", 19);
			LeaveRule_groupClause();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "groupClause"); }
		return retval;

	}
	// $ANTLR end "groupClause"

	partial void EnterRule_havingClause();
	partial void LeaveRule_havingClause();
	// $ANTLR start "havingClause"
	// HqlSqlWalker.g:178:1: havingClause : ^( HAVING logicalExpr ) ;
	[GrammarRule("havingClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> havingClause()
	{
		EnterRule_havingClause();
		EnterRule("havingClause", 20);
		TraceIn("havingClause", 20);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode HAVING44 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr45 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode HAVING44_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "havingClause");
		DebugLocation(178, 1);
		try
		{
			// HqlSqlWalker.g:179:2: ( ^( HAVING logicalExpr ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:179:4: ^( HAVING logicalExpr )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(179, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(179, 6);

			_last = (IASTNode)input.LT(1);
			HAVING44=(IASTNode)Match(input,HAVING,Follow._HAVING_in_havingClause859); 
			HAVING44_tree = (IASTNode)adaptor.DupNode(HAVING44);


			root_1 = (IASTNode)adaptor.BecomeRoot(HAVING44_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(179, 13);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_havingClause861);
			logicalExpr45=logicalExpr();
			PopFollow();

			adaptor.AddChild(root_1, logicalExpr45.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("havingClause", 20);
			LeaveRule("havingClause", 20);
			LeaveRule_havingClause();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "havingClause"); }
		return retval;

	}
	// $ANTLR end "havingClause"

	partial void EnterRule_selectClause();
	partial void LeaveRule_selectClause();
	// $ANTLR start "selectClause"
	// HqlSqlWalker.g:182:1: selectClause : ^( SELECT (d= DISTINCT )? x= selectExprList ) -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x) ;
	[GrammarRule("selectClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectClause()
	{
		EnterRule_selectClause();
		EnterRule("selectClause", 21);
		TraceIn("selectClause", 21);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode d = default(IASTNode);
		IASTNode SELECT46 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> x = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode d_tree = default(IASTNode);
		IASTNode SELECT46_tree = default(IASTNode);
		RewriteRuleNodeStream stream_SELECT=new RewriteRuleNodeStream(adaptor,"token SELECT");
		RewriteRuleNodeStream stream_DISTINCT=new RewriteRuleNodeStream(adaptor,"token DISTINCT");
		RewriteRuleSubtreeStream stream_selectExprList=new RewriteRuleSubtreeStream(adaptor,"rule selectExprList");
		try { DebugEnterRule(GrammarFileName, "selectClause");
		DebugLocation(182, 1);
		try
		{
			// HqlSqlWalker.g:183:2: ( ^( SELECT (d= DISTINCT )? x= selectExprList ) -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:183:4: ^( SELECT (d= DISTINCT )? x= selectExprList )
			{
			DebugLocation(183, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(183, 6);

			_last = (IASTNode)input.LT(1);
			SELECT46=(IASTNode)Match(input,SELECT,Follow._SELECT_in_selectClause875); 
			 
			stream_SELECT.Add(SELECT46);


			DebugLocation(183, 13);
			 HandleClauseStart( SELECT ); BeforeSelectClause(); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(183, 68);
			// HqlSqlWalker.g:183:68: (d= DISTINCT )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==DISTINCT))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:183:69: d= DISTINCT
				{
				DebugLocation(183, 70);

				_last = (IASTNode)input.LT(1);
				d=(IASTNode)Match(input,DISTINCT,Follow._DISTINCT_in_selectClause882); 
				 
				stream_DISTINCT.Add(d);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(183, 83);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._selectExprList_in_selectClause888);
			x=selectExprList();
			PopFollow();

			stream_selectExprList.Add(x.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, x
			// token labels: d
			// rule labels: x, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 184:2: -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x)
			{
				DebugLocation(184, 5);
				// HqlSqlWalker.g:184:5: ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(184, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT_CLAUSE, "{select clause}"), root_1);

				DebugLocation(184, 41);
				// HqlSqlWalker.g:184:41: ( $d)?
				if (stream_d.HasNext)
				{
					DebugLocation(184, 41);
					adaptor.AddChild(root_1, stream_d.NextNode());

				}
				stream_d.Reset();
				DebugLocation(184, 45);
				adaptor.AddChild(root_1, stream_x.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectClause", 21);
			LeaveRule("selectClause", 21);
			LeaveRule_selectClause();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "selectClause"); }
		return retval;

	}
	// $ANTLR end "selectClause"

	partial void EnterRule_selectExprList();
	partial void LeaveRule_selectExprList();
	// $ANTLR start "selectExprList"
	// HqlSqlWalker.g:187:1: selectExprList : ( selectExpr | aliasedSelectExpr )+ ;
	[GrammarRule("selectExprList")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectExprList()
	{
		EnterRule_selectExprList();
		EnterRule("selectExprList", 22);
		TraceIn("selectExprList", 22);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr47 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr48 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


				bool oldInSelect = _inSelect;
				_inSelect = true;
			
		try { DebugEnterRule(GrammarFileName, "selectExprList");
		DebugLocation(187, 1);
		try
		{
			// HqlSqlWalker.g:191:2: ( ( selectExpr | aliasedSelectExpr )+ )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:191:4: ( selectExpr | aliasedSelectExpr )+
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(191, 4);
			// HqlSqlWalker.g:191:4: ( selectExpr | aliasedSelectExpr )+
			int cnt25=0;
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=3;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==AGGREGATE||LA25_1==ALL||LA25_1==BAND||(LA25_1>=BNOT && LA25_1<=BOR)||(LA25_1>=BXOR && LA25_1<=CASE2)||LA25_1==COLON||(LA25_1>=CONSTRUCTOR && LA25_1<=COUNT)||(LA25_1>=DIV && LA25_1<=ELEMENTS)||LA25_1==IDENT||LA25_1==INDICES||LA25_1==METHOD_CALL||LA25_1==MINUS||(LA25_1>=NUM_DECIMAL && LA25_1<=OBJECT)||(LA25_1>=PARAM && LA25_1<=PLUS)||(LA25_1>=QUERY && LA25_1<=QUOTED_String)||LA25_1==STAR||LA25_1==UNARY_MINUS||LA25_1==UNION||LA25_1==WEIRD_IDENT))
				{
					alt25 = 1;
				}
				else if ((LA25_1==AS))
				{
					alt25 = 2;
				}


				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:191:6: selectExpr
					{
					DebugLocation(191, 6);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._selectExpr_in_selectExprList923);
					selectExpr47=selectExpr();
					PopFollow();

					adaptor.AddChild(root_0, selectExpr47.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:191:19: aliasedSelectExpr
					{
					DebugLocation(191, 19);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._aliasedSelectExpr_in_selectExprList927);
					aliasedSelectExpr48=aliasedSelectExpr();
					PopFollow();

					adaptor.AddChild(root_0, aliasedSelectExpr48.Tree);


					}
					break;

				default:
					if (cnt25 >= 1)
						goto loop25;

					EarlyExitException eee25 = new EarlyExitException( 25, input );
					DebugRecognitionException(eee25);
					throw eee25;
				}
				cnt25++;
			}
			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(191, 40);

					_inSelect = oldInSelect;
				

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectExprList", 22);
			LeaveRule("selectExprList", 22);
			LeaveRule_selectExprList();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "selectExprList"); }
		return retval;

	}
	// $ANTLR end "selectExprList"

	partial void EnterRule_aliasedSelectExpr();
	partial void LeaveRule_aliasedSelectExpr();
	// $ANTLR start "aliasedSelectExpr"
	// HqlSqlWalker.g:196:1: aliasedSelectExpr : ^( AS se= selectExpr i= identifier ) ;
	[GrammarRule("aliasedSelectExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr()
	{
		EnterRule_aliasedSelectExpr();
		EnterRule("aliasedSelectExpr", 23);
		TraceIn("aliasedSelectExpr", 23);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode AS49 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> se = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> i = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode AS49_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "aliasedSelectExpr");
		DebugLocation(196, 1);
		try
		{
			// HqlSqlWalker.g:201:2: ( ^( AS se= selectExpr i= identifier ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:201:4: ^( AS se= selectExpr i= identifier )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(201, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(201, 6);

			_last = (IASTNode)input.LT(1);
			AS49=(IASTNode)Match(input,AS,Follow._AS_in_aliasedSelectExpr951); 
			AS49_tree = (IASTNode)adaptor.DupNode(AS49);


			root_1 = (IASTNode)adaptor.BecomeRoot(AS49_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(201, 11);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._selectExpr_in_aliasedSelectExpr955);
			se=selectExpr();
			PopFollow();

			adaptor.AddChild(root_1, se.Tree);

			DebugLocation(201, 24);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_aliasedSelectExpr959);
			i=identifier();
			PopFollow();

			adaptor.AddChild(root_1, i.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    SetAlias((se!=null?((IASTNode)se.Tree):default(IASTNode)),(i!=null?((IASTNode)i.Tree):default(IASTNode)));
				    retval.Tree =  (se!=null?((IASTNode)se.Tree):default(IASTNode));
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aliasedSelectExpr", 23);
			LeaveRule("aliasedSelectExpr", 23);
			LeaveRule_aliasedSelectExpr();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "aliasedSelectExpr"); }
		return retval;

	}
	// $ANTLR end "aliasedSelectExpr"

	partial void EnterRule_selectExpr();
	partial void LeaveRule_selectExpr();
	// $ANTLR start "selectExpr"
	// HqlSqlWalker.g:204:1: selectExpr : (p= propertyRef | ^( ALL ar2= aliasRef ) | ^( OBJECT ar3= aliasRef ) |con= constructor | functionCall | parameter | count | collectionFunction | literal | arithmeticExpr | query );
	[GrammarRule("selectExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr()
	{
		EnterRule_selectExpr();
		EnterRule("selectExpr", 24);
		TraceIn("selectExpr", 24);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode ALL50 = default(IASTNode);
		IASTNode OBJECT51 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ar2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ar3 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> con = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall52 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter53 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> count54 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction55 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> literal56 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr57 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query58 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode ALL50_tree = default(IASTNode);
		IASTNode OBJECT51_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "selectExpr");
		DebugLocation(204, 1);
		try
		{
			// HqlSqlWalker.g:205:2: (p= propertyRef | ^( ALL ar2= aliasRef ) | ^( OBJECT ar3= aliasRef ) |con= constructor | functionCall | parameter | count | collectionFunction | literal | arithmeticExpr | query )
			int alt26=11;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case DOT:
			case IDENT:
			case WEIRD_IDENT:
				{
				alt26 = 1;
				}
				break;
			case ALL:
				{
				alt26 = 2;
				}
				break;
			case OBJECT:
				{
				alt26 = 3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt26 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt26 = 5;
				}
				break;
			case COLON:
			case PARAM:
				{
				alt26 = 6;
				}
				break;
			case COUNT:
				{
				alt26 = 7;
				}
				break;
			case ELEMENTS:
			case INDICES:
				{
				alt26 = 8;
				}
				break;
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
				{
				alt26 = 9;
				}
				break;
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case DIV:
			case MINUS:
			case PLUS:
			case STAR:
			case UNARY_MINUS:
				{
				alt26 = 10;
				}
				break;
			case QUERY:
			case UNION:
				{
				alt26 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:205:4: p= propertyRef
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(205, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_selectExpr974);
				p=propertyRef();
				PopFollow();

				adaptor.AddChild(root_0, p.Tree);

				DebugLocation(205, 22);
				 ResolveSelectExpression((p!=null?((IASTNode)p.Tree):default(IASTNode))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:206:4: ^( ALL ar2= aliasRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(206, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(206, 6);

				_last = (IASTNode)input.LT(1);
				ALL50=(IASTNode)Match(input,ALL,Follow._ALL_in_selectExpr986); 
				ALL50_tree = (IASTNode)adaptor.DupNode(ALL50);


				root_1 = (IASTNode)adaptor.BecomeRoot(ALL50_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(206, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aliasRef_in_selectExpr990);
				ar2=aliasRef();
				PopFollow();

				adaptor.AddChild(root_1, ar2.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(206, 27);
				 ResolveSelectExpression((ar2!=null?((IASTNode)ar2.Tree):default(IASTNode))); retval.Tree =  (ar2!=null?((IASTNode)ar2.Tree):default(IASTNode)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:207:4: ^( OBJECT ar3= aliasRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(207, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(207, 6);

				_last = (IASTNode)input.LT(1);
				OBJECT51=(IASTNode)Match(input,OBJECT,Follow._OBJECT_in_selectExpr1002); 
				OBJECT51_tree = (IASTNode)adaptor.DupNode(OBJECT51);


				root_1 = (IASTNode)adaptor.BecomeRoot(OBJECT51_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(207, 16);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aliasRef_in_selectExpr1006);
				ar3=aliasRef();
				PopFollow();

				adaptor.AddChild(root_1, ar3.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(207, 28);
				 ResolveSelectExpression((ar3!=null?((IASTNode)ar3.Tree):default(IASTNode))); retval.Tree =  (ar3!=null?((IASTNode)ar3.Tree):default(IASTNode)); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:208:4: con= constructor
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(208, 7);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._constructor_in_selectExpr1017);
				con=constructor();
				PopFollow();

				adaptor.AddChild(root_0, con.Tree);

				DebugLocation(208, 24);
				 ProcessConstructor((con!=null?((IASTNode)con.Tree):default(IASTNode))); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:209:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(209, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_selectExpr1028);
				functionCall52=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall52.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:210:4: parameter
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(210, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_selectExpr1033);
				parameter53=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter53.Tree);


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:211:4: count
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(211, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._count_in_selectExpr1038);
				count54=count();
				PopFollow();

				adaptor.AddChild(root_0, count54.Tree);


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:212:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(212, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_selectExpr1043);
				collectionFunction55=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction55.Tree);


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:213:4: literal
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(213, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._literal_in_selectExpr1051);
				literal56=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal56.Tree);


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:214:4: arithmeticExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(214, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._arithmeticExpr_in_selectExpr1056);
				arithmeticExpr57=arithmeticExpr();
				PopFollow();

				adaptor.AddChild(root_0, arithmeticExpr57.Tree);


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// HqlSqlWalker.g:215:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(215, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_selectExpr1061);
				query58=query();
				PopFollow();

				adaptor.AddChild(root_0, query58.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectExpr", 24);
			LeaveRule("selectExpr", 24);
			LeaveRule_selectExpr();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "selectExpr"); }
		return retval;

	}
	// $ANTLR end "selectExpr"

	partial void EnterRule_count();
	partial void LeaveRule_count();
	// $ANTLR start "count"
	// HqlSqlWalker.g:218:1: count : ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) ) ;
	[GrammarRule("count")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> count()
	{
		EnterRule_count();
		EnterRule("count", 25);
		TraceIn("count", 25);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode COUNT59 = default(IASTNode);
		IASTNode set60 = default(IASTNode);
		IASTNode ROW_STAR62 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr61 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode COUNT59_tree = default(IASTNode);
		IASTNode set60_tree = default(IASTNode);
		IASTNode ROW_STAR62_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "count");
		DebugLocation(218, 1);
		try
		{
			// HqlSqlWalker.g:219:2: ( ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:219:4: ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(219, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(219, 6);

			_last = (IASTNode)input.LT(1);
			COUNT59=(IASTNode)Match(input,COUNT,Follow._COUNT_in_count1073); 
			COUNT59_tree = (IASTNode)adaptor.DupNode(COUNT59);


			root_1 = (IASTNode)adaptor.BecomeRoot(COUNT59_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(219, 12);
			// HqlSqlWalker.g:219:12: ( DISTINCT | ALL )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==ALL||LA27_1==DISTINCT))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:
				{
				DebugLocation(219, 12);

				_last = (IASTNode)input.LT(1);
				set60=(IASTNode)input.LT(1);
				if (input.LA(1)==ALL||input.LA(1)==DISTINCT)
				{
					input.Consume();
					set60_tree = (IASTNode)adaptor.DupNode(set60);


					adaptor.AddChild(root_1, set60_tree);

					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}



				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(219, 32);
			// HqlSqlWalker.g:219:32: ( aggregateExpr | ROW_STAR )
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==AGGREGATE||LA28_1==BAND||(LA28_1>=BNOT && LA28_1<=BOR)||(LA28_1>=BXOR && LA28_1<=CASE2)||LA28_1==COLON||LA28_1==COUNT||(LA28_1>=DIV && LA28_1<=ELEMENTS)||LA28_1==FALSE||LA28_1==IDENT||(LA28_1>=INDEX_OP && LA28_1<=INDICES)||LA28_1==JAVA_CONSTANT||LA28_1==METHOD_CALL||LA28_1==MINUS||(LA28_1>=NULL && LA28_1<=NUM_LONG)||(LA28_1>=PARAM && LA28_1<=PLUS)||LA28_1==QUOTED_String||LA28_1==STAR||(LA28_1>=TRUE && LA28_1<=UNARY_MINUS)||LA28_1==VECTOR_EXPR||LA28_1==WEIRD_IDENT))
			{
				alt28 = 1;
			}
			else if ((LA28_1==ROW_STAR))
			{
				alt28 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:219:34: aggregateExpr
				{
				DebugLocation(219, 34);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aggregateExpr_in_count1088);
				aggregateExpr61=aggregateExpr();
				PopFollow();

				adaptor.AddChild(root_1, aggregateExpr61.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:219:50: ROW_STAR
				{
				DebugLocation(219, 50);

				_last = (IASTNode)input.LT(1);
				ROW_STAR62=(IASTNode)Match(input,ROW_STAR,Follow._ROW_STAR_in_count1092); 
				ROW_STAR62_tree = (IASTNode)adaptor.DupNode(ROW_STAR62);


				adaptor.AddChild(root_1, ROW_STAR62_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("count", 25);
			LeaveRule("count", 25);
			LeaveRule_count();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "count"); }
		return retval;

	}
	// $ANTLR end "count"

	partial void EnterRule_constructor();
	partial void LeaveRule_constructor();
	// $ANTLR start "constructor"
	// HqlSqlWalker.g:222:1: constructor : ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* ) ;
	[GrammarRule("constructor")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> constructor()
	{
		EnterRule_constructor();
		EnterRule("constructor", 26);
		TraceIn("constructor", 26);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode CONSTRUCTOR63 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> path64 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr65 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr66 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode CONSTRUCTOR63_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "constructor");
		DebugLocation(222, 1);
		try
		{
			// HqlSqlWalker.g:223:2: ( ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:223:4: ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(223, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(223, 6);

			_last = (IASTNode)input.LT(1);
			CONSTRUCTOR63=(IASTNode)Match(input,CONSTRUCTOR,Follow._CONSTRUCTOR_in_constructor1108); 
			CONSTRUCTOR63_tree = (IASTNode)adaptor.DupNode(CONSTRUCTOR63);


			root_1 = (IASTNode)adaptor.BecomeRoot(CONSTRUCTOR63_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(223, 18);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_constructor1110);
			path64=path();
			PopFollow();

			adaptor.AddChild(root_1, path64.Tree);

			DebugLocation(223, 23);
			// HqlSqlWalker.g:223:23: ( selectExpr | aliasedSelectExpr )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=3;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==AGGREGATE||LA29_1==ALL||LA29_1==BAND||(LA29_1>=BNOT && LA29_1<=BOR)||(LA29_1>=BXOR && LA29_1<=CASE2)||LA29_1==COLON||(LA29_1>=CONSTRUCTOR && LA29_1<=COUNT)||(LA29_1>=DIV && LA29_1<=ELEMENTS)||LA29_1==IDENT||LA29_1==INDICES||LA29_1==METHOD_CALL||LA29_1==MINUS||(LA29_1>=NUM_DECIMAL && LA29_1<=OBJECT)||(LA29_1>=PARAM && LA29_1<=PLUS)||(LA29_1>=QUERY && LA29_1<=QUOTED_String)||LA29_1==STAR||LA29_1==UNARY_MINUS||LA29_1==UNION||LA29_1==WEIRD_IDENT))
				{
					alt29 = 1;
				}
				else if ((LA29_1==AS))
				{
					alt29 = 2;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:223:25: selectExpr
					{
					DebugLocation(223, 25);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._selectExpr_in_constructor1114);
					selectExpr65=selectExpr();
					PopFollow();

					adaptor.AddChild(root_1, selectExpr65.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:223:38: aliasedSelectExpr
					{
					DebugLocation(223, 38);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._aliasedSelectExpr_in_constructor1118);
					aliasedSelectExpr66=aliasedSelectExpr();
					PopFollow();

					adaptor.AddChild(root_1, aliasedSelectExpr66.Tree);


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constructor", 26);
			LeaveRule("constructor", 26);
			LeaveRule_constructor();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "constructor"); }
		return retval;

	}
	// $ANTLR end "constructor"

	partial void EnterRule_aggregateExpr();
	partial void LeaveRule_aggregateExpr();
	// $ANTLR start "aggregateExpr"
	// HqlSqlWalker.g:226:1: aggregateExpr : ( expr | collectionFunction );
	[GrammarRule("aggregateExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr()
	{
		EnterRule_aggregateExpr();
		EnterRule("aggregateExpr", 27);
		TraceIn("aggregateExpr", 27);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> expr67 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction68 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "aggregateExpr");
		DebugLocation(226, 1);
		try
		{
			// HqlSqlWalker.g:227:2: ( expr | collectionFunction )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==AGGREGATE||LA30_1==BAND||(LA30_1>=BNOT && LA30_1<=BOR)||(LA30_1>=BXOR && LA30_1<=CASE2)||LA30_1==COLON||LA30_1==COUNT||(LA30_1>=DIV && LA30_1<=DOT)||LA30_1==FALSE||LA30_1==IDENT||LA30_1==INDEX_OP||LA30_1==JAVA_CONSTANT||LA30_1==METHOD_CALL||LA30_1==MINUS||(LA30_1>=NULL && LA30_1<=NUM_LONG)||(LA30_1>=PARAM && LA30_1<=PLUS)||LA30_1==QUOTED_String||LA30_1==STAR||(LA30_1>=TRUE && LA30_1<=UNARY_MINUS)||LA30_1==VECTOR_EXPR||LA30_1==WEIRD_IDENT))
			{
				alt30 = 1;
			}
			else if ((LA30_1==ELEMENTS||LA30_1==INDICES))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:227:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(227, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_aggregateExpr1134);
				expr67=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr67.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:228:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(228, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_aggregateExpr1140);
				collectionFunction68=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction68.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aggregateExpr", 27);
			LeaveRule("aggregateExpr", 27);
			LeaveRule_aggregateExpr();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "aggregateExpr"); }
		return retval;

	}
	// $ANTLR end "aggregateExpr"

	partial void EnterRule_fromClause();
	partial void LeaveRule_fromClause();
	// $ANTLR start "fromClause"
	// HqlSqlWalker.g:232:1: fromClause : ^(f= FROM fromElementList ) ;
	[GrammarRule("fromClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromClause()
	{
		EnterRule_fromClause();
		EnterRule("fromClause", 28);
		TraceIn("fromClause", 28);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode f = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> fromElementList69 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode f_tree = default(IASTNode);

				// NOTE: This references the INPUT AST! (see http://www.antlr.org/doc/trees.html#Action Translation)
				// the ouput AST (#fromClause) has not been built yet.
				PrepareFromClauseInputTree((IASTNode) input.LT(1), input);
			
		try { DebugEnterRule(GrammarFileName, "fromClause");
		DebugLocation(232, 1);
		try
		{
			// HqlSqlWalker.g:238:2: ( ^(f= FROM fromElementList ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:238:4: ^(f= FROM fromElementList )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(238, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(238, 7);

			_last = (IASTNode)input.LT(1);
			f=(IASTNode)Match(input,FROM,Follow._FROM_in_fromClause1160); 
			f_tree = (IASTNode)adaptor.DupNode(f);


			root_1 = (IASTNode)adaptor.BecomeRoot(f_tree, root_1);


			DebugLocation(238, 13);
			 PushFromClause(f_tree); HandleClauseStart( FROM ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(238, 69);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromElementList_in_fromClause1164);
			fromElementList69=fromElementList();
			PopFollow();

			adaptor.AddChild(root_1, fromElementList69.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromClause", 28);
			LeaveRule("fromClause", 28);
			LeaveRule_fromClause();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "fromClause"); }
		return retval;

	}
	// $ANTLR end "fromClause"

	partial void EnterRule_fromElementList();
	partial void LeaveRule_fromElementList();
	// $ANTLR start "fromElementList"
	// HqlSqlWalker.g:241:1: fromElementList : ( fromElement )+ ;
	[GrammarRule("fromElementList")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromElementList()
	{
		EnterRule_fromElementList();
		EnterRule("fromElementList", 29);
		TraceIn("fromElementList", 29);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> fromElement70 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


				bool oldInFrom = _inFrom;
				_inFrom = true;
				
		try { DebugEnterRule(GrammarFileName, "fromElementList");
		DebugLocation(241, 1);
		try
		{
			// HqlSqlWalker.g:245:2: ( ( fromElement )+ )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:245:4: ( fromElement )+
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(245, 4);
			// HqlSqlWalker.g:245:4: ( fromElement )+
			int cnt31=0;
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==FILTER_ENTITY||LA31_1==JOIN||LA31_1==RANGE))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:245:5: fromElement
					{
					DebugLocation(245, 5);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._fromElement_in_fromElementList1182);
					fromElement70=fromElement();
					PopFollow();

					adaptor.AddChild(root_0, fromElement70.Tree);


					}
					break;

				default:
					if (cnt31 >= 1)
						goto loop31;

					EarlyExitException eee31 = new EarlyExitException( 31, input );
					DebugRecognitionException(eee31);
					throw eee31;
				}
				cnt31++;
			}
			loop31:
				;

			} finally { DebugExitSubRule(31); }

			DebugLocation(245, 19);

					_inFrom = oldInFrom;
					

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromElementList", 29);
			LeaveRule("fromElementList", 29);
			LeaveRule_fromElementList();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "fromElementList"); }
		return retval;

	}
	// $ANTLR end "fromElementList"

	partial void EnterRule_fromElement();
	partial void LeaveRule_fromElement();
	// $ANTLR start "fromElement"
	// HqlSqlWalker.g:250:1: fromElement : ( ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? ) -> {fromElement != null}? ^() ->|je= joinElement ->|fe= FILTER_ENTITY a3= ALIAS -> ^() );
	[GrammarRule("fromElement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromElement()
	{
		EnterRule_fromElement();
		EnterRule("fromElement", 30);
		TraceIn("fromElement", 30);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode a = default(IASTNode);
		IASTNode pf = default(IASTNode);
		IASTNode fe = default(IASTNode);
		IASTNode a3 = default(IASTNode);
		IASTNode RANGE71 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> je = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode a_tree = default(IASTNode);
		IASTNode pf_tree = default(IASTNode);
		IASTNode fe_tree = default(IASTNode);
		IASTNode a3_tree = default(IASTNode);
		IASTNode RANGE71_tree = default(IASTNode);
		RewriteRuleNodeStream stream_RANGE=new RewriteRuleNodeStream(adaptor,"token RANGE");
		RewriteRuleNodeStream stream_ALIAS=new RewriteRuleNodeStream(adaptor,"token ALIAS");
		RewriteRuleNodeStream stream_FETCH=new RewriteRuleNodeStream(adaptor,"token FETCH");
		RewriteRuleNodeStream stream_FILTER_ENTITY=new RewriteRuleNodeStream(adaptor,"token FILTER_ENTITY");
		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		RewriteRuleSubtreeStream stream_joinElement=new RewriteRuleSubtreeStream(adaptor,"rule joinElement");

		   IASTNode fromElement = null;

		try { DebugEnterRule(GrammarFileName, "fromElement");
		DebugLocation(250, 1);
		try
		{
			// HqlSqlWalker.g:255:2: ( ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? ) -> {fromElement != null}? ^() ->|je= joinElement ->|fe= FILTER_ENTITY a3= ALIAS -> ^() )
			int alt34=3;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case RANGE:
				{
				alt34 = 1;
				}
				break;
			case JOIN:
				{
				alt34 = 2;
				}
				break;
			case FILTER_ENTITY:
				{
				alt34 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:255:4: ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? )
				{
				DebugLocation(255, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(255, 6);

				_last = (IASTNode)input.LT(1);
				RANGE71=(IASTNode)Match(input,RANGE,Follow._RANGE_in_fromElement1207); 
				 
				stream_RANGE.Add(RANGE71);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(255, 13);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._path_in_fromElement1211);
				p=path();
				PopFollow();

				stream_path.Add(p.Tree);
				DebugLocation(255, 19);
				// HqlSqlWalker.g:255:19: (a= ALIAS )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==ALIAS))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:255:20: a= ALIAS
					{
					DebugLocation(255, 21);

					_last = (IASTNode)input.LT(1);
					a=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_fromElement1216); 
					 
					stream_ALIAS.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(255, 30);
				// HqlSqlWalker.g:255:30: (pf= FETCH )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==FETCH))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:255:31: pf= FETCH
					{
					DebugLocation(255, 33);

					_last = (IASTNode)input.LT(1);
					pf=(IASTNode)Match(input,FETCH,Follow._FETCH_in_fromElement1223); 
					 
					stream_FETCH.Add(pf);


					}
					break;

				}
				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(255, 44);
				 fromElement = CreateFromElement((p!=null?((HqlSqlWalker.path_return)p).p:default(String)), (p!=null?((IASTNode)p.Tree):default(IASTNode)), a, pf); 


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 256:3: -> {fromElement != null}? ^()
				if (fromElement != null)
				{
					DebugLocation(256, 29);
					// HqlSqlWalker.g:256:29: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(256, 31);
					root_1 = (IASTNode)adaptor.BecomeRoot(fromElement, root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 257:3: ->
				{
					DebugLocation(258, 2);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:258:4: je= joinElement
				{
				DebugLocation(258, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._joinElement_in_fromElement1250);
				je=joinElement();
				PopFollow();

				stream_joinElement.Add(je.Tree);


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 259:3: ->
				{
					DebugLocation(261, 2);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:261:4: fe= FILTER_ENTITY a3= ALIAS
				{
				DebugLocation(261, 6);

				_last = (IASTNode)input.LT(1);
				fe=(IASTNode)Match(input,FILTER_ENTITY,Follow._FILTER_ENTITY_in_fromElement1265); 
				 
				stream_FILTER_ENTITY.Add(fe);

				DebugLocation(261, 23);

				_last = (IASTNode)input.LT(1);
				a3=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_fromElement1269); 
				 
				stream_ALIAS.Add(a3);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 262:3: -> ^()
				{
					DebugLocation(262, 6);
					// HqlSqlWalker.g:262:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(262, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(CreateFromFilterElement(fe,a3), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromElement", 30);
			LeaveRule("fromElement", 30);
			LeaveRule_fromElement();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "fromElement"); }
		return retval;

	}
	// $ANTLR end "fromElement"

	partial void EnterRule_joinElement();
	partial void LeaveRule_joinElement();
	// $ANTLR start "joinElement"
	// HqlSqlWalker.g:265:1: joinElement : ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? ) ;
	[GrammarRule("joinElement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> joinElement()
	{
		EnterRule_joinElement();
		EnterRule("joinElement", 31);
		TraceIn("joinElement", 31);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode f = default(IASTNode);
		IASTNode a = default(IASTNode);
		IASTNode pf = default(IASTNode);
		IASTNode with = default(IASTNode);
		IASTNode JOIN72 = default(IASTNode);
		IASTNode wildcard73 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> j = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> pRef = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode f_tree = default(IASTNode);
		IASTNode a_tree = default(IASTNode);
		IASTNode pf_tree = default(IASTNode);
		IASTNode with_tree = default(IASTNode);
		IASTNode JOIN72_tree = default(IASTNode);
		IASTNode wildcard73_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "joinElement");
		DebugLocation(265, 1);
		try
		{
			// HqlSqlWalker.g:269:2: ( ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:269:4: ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(269, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(269, 6);

			_last = (IASTNode)input.LT(1);
			JOIN72=(IASTNode)Match(input,JOIN,Follow._JOIN_in_joinElement1298); 
			JOIN72_tree = (IASTNode)adaptor.DupNode(JOIN72);


			root_1 = (IASTNode)adaptor.BecomeRoot(JOIN72_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(269, 11);
			// HqlSqlWalker.g:269:11: (j= joinType )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==FULL||LA35_1==INNER||LA35_1==LEFT||LA35_1==RIGHT))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:269:12: j= joinType
				{
				DebugLocation(269, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._joinType_in_joinElement1303);
				j=joinType();
				PopFollow();

				adaptor.AddChild(root_1, j.Tree);

				DebugLocation(269, 23);
				 SetImpliedJoinType((j!=null?((HqlSqlWalker.joinType_return)j).j:default(int))); 

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(269, 56);
			// HqlSqlWalker.g:269:56: (f= FETCH )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==FETCH))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:269:57: f= FETCH
				{
				DebugLocation(269, 58);

				_last = (IASTNode)input.LT(1);
				f=(IASTNode)Match(input,FETCH,Follow._FETCH_in_joinElement1313); 
				f_tree = (IASTNode)adaptor.DupNode(f);


				adaptor.AddChild(root_1, f_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(269, 71);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_joinElement1319);
			pRef=propertyRef();
			PopFollow();

			adaptor.AddChild(root_1, pRef.Tree);

			DebugLocation(269, 84);
			// HqlSqlWalker.g:269:84: (a= ALIAS )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==ALIAS))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:269:85: a= ALIAS
				{
				DebugLocation(269, 86);

				_last = (IASTNode)input.LT(1);
				a=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_joinElement1324); 
				a_tree = (IASTNode)adaptor.DupNode(a);


				adaptor.AddChild(root_1, a_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(269, 95);
			// HqlSqlWalker.g:269:95: (pf= FETCH )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==FETCH))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:269:96: pf= FETCH
				{
				DebugLocation(269, 98);

				_last = (IASTNode)input.LT(1);
				pf=(IASTNode)Match(input,FETCH,Follow._FETCH_in_joinElement1331); 
				pf_tree = (IASTNode)adaptor.DupNode(pf);


				adaptor.AddChild(root_1, pf_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(269, 107);
			// HqlSqlWalker.g:269:107: ( ^( (with= WITH ) ( . )* ) )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==WITH))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:269:108: ^( (with= WITH ) ( . )* )
				{
				DebugLocation(269, 108);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_2 = _last;
				IASTNode _first_2 = default(IASTNode);
				IASTNode root_2 = (IASTNode)adaptor.Nil();
				DebugLocation(269, 110);
				// HqlSqlWalker.g:269:110: (with= WITH )
				DebugEnterAlt(1);
				// HqlSqlWalker.g:269:111: with= WITH
				{
				DebugLocation(269, 115);

				_last = (IASTNode)input.LT(1);
				with=(IASTNode)Match(input,WITH,Follow._WITH_in_joinElement1340); 
				with_tree = (IASTNode)adaptor.DupNode(with);


				adaptor.AddChild(root_2, with_tree);


				}


				if (input.LA(1) == TokenTypes.Down) {
					Match(input, TokenTypes.Down, null); 
					DebugLocation(269, 122);
					// HqlSqlWalker.g:269:122: ( . )*
					try { DebugEnterSubRule(39);
					while (true)
					{
						int alt39=2;
						try { DebugEnterDecision(39, false);
						int LA39_1 = input.LA(1);

						if (((LA39_1>=AGGREGATE && LA39_1<=THETA_JOINS)))
						{
							alt39 = 1;
						}
						else if ((LA39_1==UP))
						{
							alt39 = 2;
						}


						} finally { DebugExitDecision(39); }
						switch ( alt39 )
						{
						case 1:
							DebugEnterAlt(1);
							// HqlSqlWalker.g:269:122: .
							{
							DebugLocation(269, 122);

							_last = (IASTNode)input.LT(1);
							wildcard73=(IASTNode)input.LT(1);

							MatchAny(input); 
							wildcard73_tree = (IASTNode)adaptor.DupTree(wildcard73);
							adaptor.AddChild(root_2, wildcard73_tree);


							}
							break;

						default:
							goto loop39;
						}
					}

					loop39:
						;

					} finally { DebugExitSubRule(39); }


					Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_1, root_2);
				_last = _save_last_2;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(40); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}

			DebugLocation(270, 2);

					CreateFromJoinElement((pRef!=null?((IASTNode)pRef.Tree):default(IASTNode)),a,(j!=null?((HqlSqlWalker.joinType_return)j).j:default(int)),f, pf, with);
					SetImpliedJoinType(INNER);	// Reset the implied join type.
				

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("joinElement", 31);
			LeaveRule("joinElement", 31);
			LeaveRule_joinElement();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "joinElement"); }
		return retval;

	}
	// $ANTLR end "joinElement"

	private sealed partial class joinType_return : AstTreeRuleReturnScope<IASTNode, IASTNode>
	{
		public int j;
		public joinType_return(HqlSqlWalker grammar) {OnCreated(grammar);}
		partial void OnCreated(HqlSqlWalker grammar);
	}

	partial void EnterRule_joinType();
	partial void LeaveRule_joinType();
	// $ANTLR start "joinType"
	// HqlSqlWalker.g:278:1: joinType returns [int j] : ( ( (left= LEFT |right= RIGHT ) (outer= OUTER )? ) | FULL | INNER );
	[GrammarRule("joinType")]
	private HqlSqlWalker.joinType_return joinType()
	{
		EnterRule_joinType();
		EnterRule("joinType", 32);
		TraceIn("joinType", 32);
		HqlSqlWalker.joinType_return retval = new HqlSqlWalker.joinType_return(this);
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode left = default(IASTNode);
		IASTNode right = default(IASTNode);
		IASTNode outer = default(IASTNode);
		IASTNode FULL74 = default(IASTNode);
		IASTNode INNER75 = default(IASTNode);

		IASTNode left_tree = default(IASTNode);
		IASTNode right_tree = default(IASTNode);
		IASTNode outer_tree = default(IASTNode);
		IASTNode FULL74_tree = default(IASTNode);
		IASTNode INNER75_tree = default(IASTNode);

		   retval.j = INNER;

		try { DebugEnterRule(GrammarFileName, "joinType");
		DebugLocation(278, 1);
		try
		{
			// HqlSqlWalker.g:282:2: ( ( (left= LEFT |right= RIGHT ) (outer= OUTER )? ) | FULL | INNER )
			int alt43=3;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case LEFT:
			case RIGHT:
				{
				alt43 = 1;
				}
				break;
			case FULL:
				{
				alt43 = 2;
				}
				break;
			case INNER:
				{
				alt43 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:282:4: ( (left= LEFT |right= RIGHT ) (outer= OUTER )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(282, 4);
				// HqlSqlWalker.g:282:4: ( (left= LEFT |right= RIGHT ) (outer= OUTER )? )
				DebugEnterAlt(1);
				// HqlSqlWalker.g:282:6: (left= LEFT |right= RIGHT ) (outer= OUTER )?
				{
				DebugLocation(282, 6);
				// HqlSqlWalker.g:282:6: (left= LEFT |right= RIGHT )
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==LEFT))
				{
					alt41 = 1;
				}
				else if ((LA41_1==RIGHT))
				{
					alt41 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:282:7: left= LEFT
					{
					DebugLocation(282, 11);

					_last = (IASTNode)input.LT(1);
					left=(IASTNode)Match(input,LEFT,Follow._LEFT_in_joinType1381); 
					left_tree = (IASTNode)adaptor.DupNode(left);


					adaptor.AddChild(root_0, left_tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:282:19: right= RIGHT
					{
					DebugLocation(282, 24);

					_last = (IASTNode)input.LT(1);
					right=(IASTNode)Match(input,RIGHT,Follow._RIGHT_in_joinType1387); 
					right_tree = (IASTNode)adaptor.DupNode(right);


					adaptor.AddChild(root_0, right_tree);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(282, 32);
				// HqlSqlWalker.g:282:32: (outer= OUTER )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==OUTER))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:282:33: outer= OUTER
					{
					DebugLocation(282, 38);

					_last = (IASTNode)input.LT(1);
					outer=(IASTNode)Match(input,OUTER,Follow._OUTER_in_joinType1393); 
					outer_tree = (IASTNode)adaptor.DupNode(outer);


					adaptor.AddChild(root_0, outer_tree);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(283, 2);

						if (left != null)       retval.j = LEFT_OUTER;
						else if (right != null) retval.j = RIGHT_OUTER;
						else if (outer != null) retval.j = RIGHT_OUTER;
					

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:288:4: FULL
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(288, 4);

				_last = (IASTNode)input.LT(1);
				FULL74=(IASTNode)Match(input,FULL,Follow._FULL_in_joinType1407); 
				FULL74_tree = (IASTNode)adaptor.DupNode(FULL74);


				adaptor.AddChild(root_0, FULL74_tree);

				DebugLocation(288, 9);

						retval.j = FULL;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:291:4: INNER
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(291, 4);

				_last = (IASTNode)input.LT(1);
				INNER75=(IASTNode)Match(input,INNER,Follow._INNER_in_joinType1414); 
				INNER75_tree = (IASTNode)adaptor.DupNode(INNER75);


				adaptor.AddChild(root_0, INNER75_tree);

				DebugLocation(291, 10);

						retval.j = INNER;
					

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("joinType", 32);
			LeaveRule("joinType", 32);
			LeaveRule_joinType();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "joinType"); }
		return retval;

	}
	// $ANTLR end "joinType"

	private sealed partial class path_return : AstTreeRuleReturnScope<IASTNode, IASTNode>
	{
		public String p;
		public path_return(HqlSqlWalker grammar) {OnCreated(grammar);}
		partial void OnCreated(HqlSqlWalker grammar);
	}

	partial void EnterRule_path();
	partial void LeaveRule_path();
	// $ANTLR start "path"
	// HqlSqlWalker.g:298:1: path returns [String p] : (a= identifier | ^( DOT x= path y= identifier ) );
	[GrammarRule("path")]
	private HqlSqlWalker.path_return path()
	{
		EnterRule_path();
		EnterRule("path", 33);
		TraceIn("path", 33);
		HqlSqlWalker.path_return retval = new HqlSqlWalker.path_return(this);
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode DOT76 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> a = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> x = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> y = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode DOT76_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "path");
		DebugLocation(298, 1);
		try
		{
			// HqlSqlWalker.g:299:2: (a= identifier | ^( DOT x= path y= identifier ) )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_1 = input.LA(1);

			if ((LA44_1==IDENT||LA44_1==WEIRD_IDENT))
			{
				alt44 = 1;
			}
			else if ((LA44_1==DOT))
			{
				alt44 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:299:4: a= identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(299, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_path1436);
				a=identifier();
				PopFollow();

				adaptor.AddChild(root_0, a.Tree);

				DebugLocation(299, 17);
				 retval.p = (a!=null?((IASTNode)a.Start):default(IASTNode)).ToString();

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:300:4: ^( DOT x= path y= identifier )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(300, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(300, 6);

				_last = (IASTNode)input.LT(1);
				DOT76=(IASTNode)Match(input,DOT,Follow._DOT_in_path1444); 
				DOT76_tree = (IASTNode)adaptor.DupNode(DOT76);


				root_1 = (IASTNode)adaptor.BecomeRoot(DOT76_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(300, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._path_in_path1448);
				x=path();
				PopFollow();

				adaptor.AddChild(root_1, x.Tree);

				DebugLocation(300, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_path1452);
				y=identifier();
				PopFollow();

				adaptor.AddChild(root_1, y.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(300, 31);

							StringBuilder buf = new StringBuilder();
							buf.Append((x!=null?((HqlSqlWalker.path_return)x).p:default(String))).Append('.').Append((y!=null?((IASTNode)y.Start):default(IASTNode)).ToString());
							retval.p = buf.ToString();
						

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("path", 33);
			LeaveRule("path", 33);
			LeaveRule_path();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "path"); }
		return retval;

	}
	// $ANTLR end "path"

	partial void EnterRule_pathAsIdent();
	partial void LeaveRule_pathAsIdent();
	// $ANTLR start "pathAsIdent"
	// HqlSqlWalker.g:308:1: pathAsIdent : path -> ^( IDENT[$path.p] ) ;
	[GrammarRule("pathAsIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> pathAsIdent()
	{
		EnterRule_pathAsIdent();
		EnterRule("pathAsIdent", 34);
		TraceIn("pathAsIdent", 34);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> path77 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		try { DebugEnterRule(GrammarFileName, "pathAsIdent");
		DebugLocation(308, 4);
		try
		{
			// HqlSqlWalker.g:309:5: ( path -> ^( IDENT[$path.p] ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:309:7: path
			{
			DebugLocation(309, 7);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_pathAsIdent1471);
			path77=path();
			PopFollow();

			stream_path.Add(path77.Tree);


			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 310:5: -> ^( IDENT[$path.p] )
			{
				DebugLocation(310, 8);
				// HqlSqlWalker.g:310:8: ^( IDENT[$path.p] )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(310, 10);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(IDENT, (path77!=null?((HqlSqlWalker.path_return)path77).p:default(String))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pathAsIdent", 34);
			LeaveRule("pathAsIdent", 34);
			LeaveRule_pathAsIdent();
		}
		DebugLocation(311, 4);
		} finally { DebugExitRule(GrammarFileName, "pathAsIdent"); }
		return retval;

	}
	// $ANTLR end "pathAsIdent"

	partial void EnterRule_withClause();
	partial void LeaveRule_withClause();
	// $ANTLR start "withClause"
	// HqlSqlWalker.g:313:1: withClause : ^(w= WITH b= logicalExpr ) -> ^( $w $b) ;
	[GrammarRule("withClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> withClause()
	{
		EnterRule_withClause();
		EnterRule("withClause", 35);
		TraceIn("withClause", 35);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode w = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> b = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode w_tree = default(IASTNode);
		RewriteRuleNodeStream stream_WITH=new RewriteRuleNodeStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_logicalExpr=new RewriteRuleSubtreeStream(adaptor,"rule logicalExpr");
		try { DebugEnterRule(GrammarFileName, "withClause");
		DebugLocation(313, 1);
		try
		{
			// HqlSqlWalker.g:320:2: ( ^(w= WITH b= logicalExpr ) -> ^( $w $b) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:320:4: ^(w= WITH b= logicalExpr )
			{
			DebugLocation(320, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(320, 7);

			_last = (IASTNode)input.LT(1);
			w=(IASTNode)Match(input,WITH,Follow._WITH_in_withClause1512); 
			 
			stream_WITH.Add(w);


			DebugLocation(320, 13);
			 HandleClauseStart( WITH ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(320, 45);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_withClause1518);
			b=logicalExpr();
			PopFollow();

			stream_logicalExpr.Add(b.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: w, b
			// token labels: w
			// rule labels: b, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_w=new RewriteRuleNodeStream(adaptor,"token w",w);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 321:2: -> ^( $w $b)
			{
				DebugLocation(321, 5);
				// HqlSqlWalker.g:321:5: ^( $w $b)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(321, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_w.NextNode(), root_1);

				DebugLocation(321, 11);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("withClause", 35);
			LeaveRule("withClause", 35);
			LeaveRule_withClause();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "withClause"); }
		return retval;

	}
	// $ANTLR end "withClause"

	partial void EnterRule_whereClause();
	partial void LeaveRule_whereClause();
	// $ANTLR start "whereClause"
	// HqlSqlWalker.g:324:1: whereClause : ^(w= WHERE b= logicalExpr ) -> ^( $w $b) ;
	[GrammarRule("whereClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> whereClause()
	{
		EnterRule_whereClause();
		EnterRule("whereClause", 36);
		TraceIn("whereClause", 36);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode w = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> b = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode w_tree = default(IASTNode);
		RewriteRuleNodeStream stream_WHERE=new RewriteRuleNodeStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_logicalExpr=new RewriteRuleSubtreeStream(adaptor,"rule logicalExpr");
		try { DebugEnterRule(GrammarFileName, "whereClause");
		DebugLocation(324, 1);
		try
		{
			// HqlSqlWalker.g:325:2: ( ^(w= WHERE b= logicalExpr ) -> ^( $w $b) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:325:4: ^(w= WHERE b= logicalExpr )
			{
			DebugLocation(325, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(325, 7);

			_last = (IASTNode)input.LT(1);
			w=(IASTNode)Match(input,WHERE,Follow._WHERE_in_whereClause1546); 
			 
			stream_WHERE.Add(w);


			DebugLocation(325, 14);
			 HandleClauseStart( WHERE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(325, 47);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_whereClause1552);
			b=logicalExpr();
			PopFollow();

			stream_logicalExpr.Add(b.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: w, b
			// token labels: w
			// rule labels: b, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_w=new RewriteRuleNodeStream(adaptor,"token w",w);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 326:2: -> ^( $w $b)
			{
				DebugLocation(326, 5);
				// HqlSqlWalker.g:326:5: ^( $w $b)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(326, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_w.NextNode(), root_1);

				DebugLocation(326, 11);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whereClause", 36);
			LeaveRule("whereClause", 36);
			LeaveRule_whereClause();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "whereClause"); }
		return retval;

	}
	// $ANTLR end "whereClause"

	partial void EnterRule_logicalExpr();
	partial void LeaveRule_logicalExpr();
	// $ANTLR start "logicalExpr"
	// HqlSqlWalker.g:329:1: logicalExpr : ( ^( AND logicalExpr logicalExpr ) | ^( OR logicalExpr logicalExpr ) | ^( NOT logicalExpr ) | comparisonExpr | functionCall | logicalPath );
	[GrammarRule("logicalExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr()
	{
		EnterRule_logicalExpr();
		EnterRule("logicalExpr", 37);
		TraceIn("logicalExpr", 37);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode AND78 = default(IASTNode);
		IASTNode OR81 = default(IASTNode);
		IASTNode NOT84 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr79 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr80 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr82 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr83 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr85 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr86 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall87 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalPath88 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode AND78_tree = default(IASTNode);
		IASTNode OR81_tree = default(IASTNode);
		IASTNode NOT84_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "logicalExpr");
		DebugLocation(329, 1);
		try
		{
			// HqlSqlWalker.g:330:2: ( ^( AND logicalExpr logicalExpr ) | ^( OR logicalExpr logicalExpr ) | ^( NOT logicalExpr ) | comparisonExpr | functionCall | logicalPath )
			int alt45=6;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case AND:
				{
				alt45 = 1;
				}
				break;
			case OR:
				{
				alt45 = 2;
				}
				break;
			case NOT:
				{
				alt45 = 3;
				}
				break;
			case BETWEEN:
			case EQ:
			case EXISTS:
			case GE:
			case GT:
			case IN:
			case IS_NOT_NULL:
			case IS_NULL:
			case LE:
			case LIKE:
			case LT:
			case NE:
			case NOT_BETWEEN:
			case NOT_IN:
			case NOT_LIKE:
				{
				alt45 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt45 = 5;
				}
				break;
			case DOT:
			case IDENT:
			case INDEX_OP:
			case WEIRD_IDENT:
				{
				alt45 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:330:4: ^( AND logicalExpr logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(330, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(330, 6);

				_last = (IASTNode)input.LT(1);
				AND78=(IASTNode)Match(input,AND,Follow._AND_in_logicalExpr1578); 
				AND78_tree = (IASTNode)adaptor.DupNode(AND78);


				root_1 = (IASTNode)adaptor.BecomeRoot(AND78_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(330, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1580);
				logicalExpr79=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr79.Tree);

				DebugLocation(330, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1582);
				logicalExpr80=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr80.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:331:4: ^( OR logicalExpr logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(331, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(331, 6);

				_last = (IASTNode)input.LT(1);
				OR81=(IASTNode)Match(input,OR,Follow._OR_in_logicalExpr1589); 
				OR81_tree = (IASTNode)adaptor.DupNode(OR81);


				root_1 = (IASTNode)adaptor.BecomeRoot(OR81_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(331, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1591);
				logicalExpr82=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr82.Tree);

				DebugLocation(331, 21);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1593);
				logicalExpr83=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr83.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:332:4: ^( NOT logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(332, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(332, 6);

				_last = (IASTNode)input.LT(1);
				NOT84=(IASTNode)Match(input,NOT,Follow._NOT_in_logicalExpr1600); 
				NOT84_tree = (IASTNode)adaptor.DupNode(NOT84);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT84_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(332, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1602);
				logicalExpr85=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr85.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:333:4: comparisonExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(333, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._comparisonExpr_in_logicalExpr1608);
				comparisonExpr86=comparisonExpr();
				PopFollow();

				adaptor.AddChild(root_0, comparisonExpr86.Tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:334:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(334, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_logicalExpr1613);
				functionCall87=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall87.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:335:4: logicalPath
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(335, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalPath_in_logicalExpr1618);
				logicalPath88=logicalPath();
				PopFollow();

				adaptor.AddChild(root_0, logicalPath88.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalExpr", 37);
			LeaveRule("logicalExpr", 37);
			LeaveRule_logicalExpr();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalExpr"); }
		return retval;

	}
	// $ANTLR end "logicalExpr"

	partial void EnterRule_logicalPath();
	partial void LeaveRule_logicalPath();
	// $ANTLR start "logicalPath"
	// HqlSqlWalker.g:338:1: logicalPath : p= addrExpr[ true ] -> ^( EQ $p TRUE ) ;
	[GrammarRule("logicalPath")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> logicalPath()
	{
		EnterRule_logicalPath();
		EnterRule("logicalPath", 38);
		TraceIn("logicalPath", 38);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		RewriteRuleSubtreeStream stream_addrExpr=new RewriteRuleSubtreeStream(adaptor,"rule addrExpr");
		try { DebugEnterRule(GrammarFileName, "logicalPath");
		DebugLocation(338, 1);
		try
		{
			// HqlSqlWalker.g:342:2: (p= addrExpr[ true ] -> ^( EQ $p TRUE ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:342:4: p= addrExpr[ true ]
			{
			DebugLocation(342, 5);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExpr_in_logicalPath1637);
			p=addrExpr(true);
			PopFollow();

			stream_addrExpr.Add(p.Tree);
			DebugLocation(342, 24);
			Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode)));


			{
			// AST REWRITE
			// elements: p
			// token labels: 
			// rule labels: p, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 342:45: -> ^( EQ $p TRUE )
			{
				DebugLocation(342, 48);
				// HqlSqlWalker.g:342:48: ^( EQ $p TRUE )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(342, 50);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(EQ, "EQ"), root_1);

				DebugLocation(342, 54);
				adaptor.AddChild(root_1, stream_p.NextTree());
				DebugLocation(342, 56);
				adaptor.AddChild(root_1, (IASTNode)adaptor.Create(TRUE, "TRUE"));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    PrepareLogicOperator( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalPath", 38);
			LeaveRule("logicalPath", 38);
			LeaveRule_logicalPath();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalPath"); }
		return retval;

	}
	// $ANTLR end "logicalPath"

	partial void EnterRule_comparisonExpr();
	partial void LeaveRule_comparisonExpr();
	// $ANTLR start "comparisonExpr"
	// HqlSqlWalker.g:346:1: comparisonExpr : ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) ) ;
	[GrammarRule("comparisonExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr()
	{
		EnterRule_comparisonExpr();
		EnterRule("comparisonExpr", 39);
		TraceIn("comparisonExpr", 39);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode EQ89 = default(IASTNode);
		IASTNode NE92 = default(IASTNode);
		IASTNode LT95 = default(IASTNode);
		IASTNode GT98 = default(IASTNode);
		IASTNode LE101 = default(IASTNode);
		IASTNode GE104 = default(IASTNode);
		IASTNode LIKE107 = default(IASTNode);
		IASTNode ESCAPE110 = default(IASTNode);
		IASTNode NOT_LIKE112 = default(IASTNode);
		IASTNode ESCAPE115 = default(IASTNode);
		IASTNode BETWEEN117 = default(IASTNode);
		IASTNode NOT_BETWEEN121 = default(IASTNode);
		IASTNode IN125 = default(IASTNode);
		IASTNode NOT_IN128 = default(IASTNode);
		IASTNode IS_NULL131 = default(IASTNode);
		IASTNode IS_NOT_NULL133 = default(IASTNode);
		IASTNode EXISTS135 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery90 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery91 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery93 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery94 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery96 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery97 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery99 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery100 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery102 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery103 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery105 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery106 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery108 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr109 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr111 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery113 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr114 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr116 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery118 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery119 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery120 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery122 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery123 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery124 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery126 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs127 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery129 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs130 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery132 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery134 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr136 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect137 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode EQ89_tree = default(IASTNode);
		IASTNode NE92_tree = default(IASTNode);
		IASTNode LT95_tree = default(IASTNode);
		IASTNode GT98_tree = default(IASTNode);
		IASTNode LE101_tree = default(IASTNode);
		IASTNode GE104_tree = default(IASTNode);
		IASTNode LIKE107_tree = default(IASTNode);
		IASTNode ESCAPE110_tree = default(IASTNode);
		IASTNode NOT_LIKE112_tree = default(IASTNode);
		IASTNode ESCAPE115_tree = default(IASTNode);
		IASTNode BETWEEN117_tree = default(IASTNode);
		IASTNode NOT_BETWEEN121_tree = default(IASTNode);
		IASTNode IN125_tree = default(IASTNode);
		IASTNode NOT_IN128_tree = default(IASTNode);
		IASTNode IS_NULL131_tree = default(IASTNode);
		IASTNode IS_NOT_NULL133_tree = default(IASTNode);
		IASTNode EXISTS135_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "comparisonExpr");
		DebugLocation(346, 1);
		try
		{
			// HqlSqlWalker.g:350:2: ( ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:351:2: ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(351, 2);
			// HqlSqlWalker.g:351:2: ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) )
			int alt49=15;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt49 = 1;
				}
				break;
			case NE:
				{
				alt49 = 2;
				}
				break;
			case LT:
				{
				alt49 = 3;
				}
				break;
			case GT:
				{
				alt49 = 4;
				}
				break;
			case LE:
				{
				alt49 = 5;
				}
				break;
			case GE:
				{
				alt49 = 6;
				}
				break;
			case LIKE:
				{
				alt49 = 7;
				}
				break;
			case NOT_LIKE:
				{
				alt49 = 8;
				}
				break;
			case BETWEEN:
				{
				alt49 = 9;
				}
				break;
			case NOT_BETWEEN:
				{
				alt49 = 10;
				}
				break;
			case IN:
				{
				alt49 = 11;
				}
				break;
			case NOT_IN:
				{
				alt49 = 12;
				}
				break;
			case IS_NULL:
				{
				alt49 = 13;
				}
				break;
			case IS_NOT_NULL:
				{
				alt49 = 14;
				}
				break;
			case EXISTS:
				{
				alt49 = 15;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:351:4: ^( EQ exprOrSubquery exprOrSubquery )
				{
				DebugLocation(351, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(351, 6);

				_last = (IASTNode)input.LT(1);
				EQ89=(IASTNode)Match(input,EQ,Follow._EQ_in_comparisonExpr1675); 
				EQ89_tree = (IASTNode)adaptor.DupNode(EQ89);


				root_1 = (IASTNode)adaptor.BecomeRoot(EQ89_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(351, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1677);
				exprOrSubquery90=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery90.Tree);

				DebugLocation(351, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1679);
				exprOrSubquery91=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery91.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:352:4: ^( NE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(352, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(352, 6);

				_last = (IASTNode)input.LT(1);
				NE92=(IASTNode)Match(input,NE,Follow._NE_in_comparisonExpr1686); 
				NE92_tree = (IASTNode)adaptor.DupNode(NE92);


				root_1 = (IASTNode)adaptor.BecomeRoot(NE92_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(352, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1688);
				exprOrSubquery93=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery93.Tree);

				DebugLocation(352, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1690);
				exprOrSubquery94=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery94.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:353:4: ^( LT exprOrSubquery exprOrSubquery )
				{
				DebugLocation(353, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(353, 6);

				_last = (IASTNode)input.LT(1);
				LT95=(IASTNode)Match(input,LT,Follow._LT_in_comparisonExpr1697); 
				LT95_tree = (IASTNode)adaptor.DupNode(LT95);


				root_1 = (IASTNode)adaptor.BecomeRoot(LT95_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(353, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1699);
				exprOrSubquery96=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery96.Tree);

				DebugLocation(353, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1701);
				exprOrSubquery97=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery97.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:354:4: ^( GT exprOrSubquery exprOrSubquery )
				{
				DebugLocation(354, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(354, 6);

				_last = (IASTNode)input.LT(1);
				GT98=(IASTNode)Match(input,GT,Follow._GT_in_comparisonExpr1708); 
				GT98_tree = (IASTNode)adaptor.DupNode(GT98);


				root_1 = (IASTNode)adaptor.BecomeRoot(GT98_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(354, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1710);
				exprOrSubquery99=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery99.Tree);

				DebugLocation(354, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1712);
				exprOrSubquery100=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery100.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:355:4: ^( LE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(355, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(355, 6);

				_last = (IASTNode)input.LT(1);
				LE101=(IASTNode)Match(input,LE,Follow._LE_in_comparisonExpr1719); 
				LE101_tree = (IASTNode)adaptor.DupNode(LE101);


				root_1 = (IASTNode)adaptor.BecomeRoot(LE101_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(355, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1721);
				exprOrSubquery102=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery102.Tree);

				DebugLocation(355, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1723);
				exprOrSubquery103=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery103.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:356:4: ^( GE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(356, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(356, 6);

				_last = (IASTNode)input.LT(1);
				GE104=(IASTNode)Match(input,GE,Follow._GE_in_comparisonExpr1730); 
				GE104_tree = (IASTNode)adaptor.DupNode(GE104);


				root_1 = (IASTNode)adaptor.BecomeRoot(GE104_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(356, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1732);
				exprOrSubquery105=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery105.Tree);

				DebugLocation(356, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1734);
				exprOrSubquery106=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery106.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:357:4: ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? )
				{
				DebugLocation(357, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(357, 6);

				_last = (IASTNode)input.LT(1);
				LIKE107=(IASTNode)Match(input,LIKE,Follow._LIKE_in_comparisonExpr1741); 
				LIKE107_tree = (IASTNode)adaptor.DupNode(LIKE107);


				root_1 = (IASTNode)adaptor.BecomeRoot(LIKE107_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(357, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1743);
				exprOrSubquery108=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery108.Tree);

				DebugLocation(357, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_comparisonExpr1745);
				expr109=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr109.Tree);

				DebugLocation(357, 31);
				// HqlSqlWalker.g:357:31: ( ^( ESCAPE expr ) )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==ESCAPE))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:357:33: ^( ESCAPE expr )
					{
					DebugLocation(357, 33);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(357, 35);

					_last = (IASTNode)input.LT(1);
					ESCAPE110=(IASTNode)Match(input,ESCAPE,Follow._ESCAPE_in_comparisonExpr1750); 
					ESCAPE110_tree = (IASTNode)adaptor.DupNode(ESCAPE110);


					root_2 = (IASTNode)adaptor.BecomeRoot(ESCAPE110_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(357, 42);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1752);
					expr111=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr111.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:358:4: ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? )
				{
				DebugLocation(358, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(358, 6);

				_last = (IASTNode)input.LT(1);
				NOT_LIKE112=(IASTNode)Match(input,NOT_LIKE,Follow._NOT_LIKE_in_comparisonExpr1764); 
				NOT_LIKE112_tree = (IASTNode)adaptor.DupNode(NOT_LIKE112);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_LIKE112_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(358, 15);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1766);
				exprOrSubquery113=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery113.Tree);

				DebugLocation(358, 30);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_comparisonExpr1768);
				expr114=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr114.Tree);

				DebugLocation(358, 35);
				// HqlSqlWalker.g:358:35: ( ^( ESCAPE expr ) )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==ESCAPE))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:358:37: ^( ESCAPE expr )
					{
					DebugLocation(358, 37);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(358, 39);

					_last = (IASTNode)input.LT(1);
					ESCAPE115=(IASTNode)Match(input,ESCAPE,Follow._ESCAPE_in_comparisonExpr1773); 
					ESCAPE115_tree = (IASTNode)adaptor.DupNode(ESCAPE115);


					root_2 = (IASTNode)adaptor.BecomeRoot(ESCAPE115_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(358, 46);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1775);
					expr116=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr116.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:359:4: ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery )
				{
				DebugLocation(359, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(359, 6);

				_last = (IASTNode)input.LT(1);
				BETWEEN117=(IASTNode)Match(input,BETWEEN,Follow._BETWEEN_in_comparisonExpr1787); 
				BETWEEN117_tree = (IASTNode)adaptor.DupNode(BETWEEN117);


				root_1 = (IASTNode)adaptor.BecomeRoot(BETWEEN117_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(359, 14);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1789);
				exprOrSubquery118=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery118.Tree);

				DebugLocation(359, 29);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1791);
				exprOrSubquery119=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery119.Tree);

				DebugLocation(359, 44);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1793);
				exprOrSubquery120=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery120.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:360:4: ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery )
				{
				DebugLocation(360, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(360, 6);

				_last = (IASTNode)input.LT(1);
				NOT_BETWEEN121=(IASTNode)Match(input,NOT_BETWEEN,Follow._NOT_BETWEEN_in_comparisonExpr1800); 
				NOT_BETWEEN121_tree = (IASTNode)adaptor.DupNode(NOT_BETWEEN121);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_BETWEEN121_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(360, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1802);
				exprOrSubquery122=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery122.Tree);

				DebugLocation(360, 33);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1804);
				exprOrSubquery123=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery123.Tree);

				DebugLocation(360, 48);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1806);
				exprOrSubquery124=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery124.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// HqlSqlWalker.g:361:4: ^( IN exprOrSubquery inRhs )
				{
				DebugLocation(361, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(361, 6);

				_last = (IASTNode)input.LT(1);
				IN125=(IASTNode)Match(input,IN,Follow._IN_in_comparisonExpr1813); 
				IN125_tree = (IASTNode)adaptor.DupNode(IN125);


				root_1 = (IASTNode)adaptor.BecomeRoot(IN125_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(361, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1815);
				exprOrSubquery126=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery126.Tree);

				DebugLocation(361, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._inRhs_in_comparisonExpr1817);
				inRhs127=inRhs();
				PopFollow();

				adaptor.AddChild(root_1, inRhs127.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// HqlSqlWalker.g:362:4: ^( NOT_IN exprOrSubquery inRhs )
				{
				DebugLocation(362, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(362, 6);

				_last = (IASTNode)input.LT(1);
				NOT_IN128=(IASTNode)Match(input,NOT_IN,Follow._NOT_IN_in_comparisonExpr1825); 
				NOT_IN128_tree = (IASTNode)adaptor.DupNode(NOT_IN128);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_IN128_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(362, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1827);
				exprOrSubquery129=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery129.Tree);

				DebugLocation(362, 28);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._inRhs_in_comparisonExpr1829);
				inRhs130=inRhs();
				PopFollow();

				adaptor.AddChild(root_1, inRhs130.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// HqlSqlWalker.g:363:4: ^( IS_NULL exprOrSubquery )
				{
				DebugLocation(363, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(363, 6);

				_last = (IASTNode)input.LT(1);
				IS_NULL131=(IASTNode)Match(input,IS_NULL,Follow._IS_NULL_in_comparisonExpr1837); 
				IS_NULL131_tree = (IASTNode)adaptor.DupNode(IS_NULL131);


				root_1 = (IASTNode)adaptor.BecomeRoot(IS_NULL131_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(363, 14);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1839);
				exprOrSubquery132=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery132.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// HqlSqlWalker.g:364:4: ^( IS_NOT_NULL exprOrSubquery )
				{
				DebugLocation(364, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(364, 6);

				_last = (IASTNode)input.LT(1);
				IS_NOT_NULL133=(IASTNode)Match(input,IS_NOT_NULL,Follow._IS_NOT_NULL_in_comparisonExpr1846); 
				IS_NOT_NULL133_tree = (IASTNode)adaptor.DupNode(IS_NOT_NULL133);


				root_1 = (IASTNode)adaptor.BecomeRoot(IS_NOT_NULL133_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(364, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1848);
				exprOrSubquery134=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery134.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// HqlSqlWalker.g:367:4: ^( EXISTS ( expr | collectionFunctionOrSubselect ) )
				{
				DebugLocation(367, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(367, 6);

				_last = (IASTNode)input.LT(1);
				EXISTS135=(IASTNode)Match(input,EXISTS,Follow._EXISTS_in_comparisonExpr1857); 
				EXISTS135_tree = (IASTNode)adaptor.DupNode(EXISTS135);


				root_1 = (IASTNode)adaptor.BecomeRoot(EXISTS135_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(367, 13);
				// HqlSqlWalker.g:367:13: ( expr | collectionFunctionOrSubselect )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==AGGREGATE||LA48_1==BAND||(LA48_1>=BNOT && LA48_1<=BOR)||(LA48_1>=BXOR && LA48_1<=CASE2)||LA48_1==COLON||LA48_1==COUNT||(LA48_1>=DIV && LA48_1<=DOT)||LA48_1==FALSE||LA48_1==IDENT||LA48_1==INDEX_OP||LA48_1==JAVA_CONSTANT||LA48_1==METHOD_CALL||LA48_1==MINUS||(LA48_1>=NULL && LA48_1<=NUM_LONG)||(LA48_1>=PARAM && LA48_1<=PLUS)||LA48_1==QUOTED_String||LA48_1==STAR||(LA48_1>=TRUE && LA48_1<=UNARY_MINUS)||LA48_1==VECTOR_EXPR||LA48_1==WEIRD_IDENT))
				{
					alt48 = 1;
				}
				else if ((LA48_1==ELEMENTS||LA48_1==INDICES||LA48_1==QUERY||LA48_1==UNION))
				{
					alt48 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:367:15: expr
					{
					DebugLocation(367, 15);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1861);
					expr136=expr();
					PopFollow();

					adaptor.AddChild(root_1, expr136.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:367:22: collectionFunctionOrSubselect
					{
					DebugLocation(367, 22);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._collectionFunctionOrSubselect_in_comparisonExpr1865);
					collectionFunctionOrSubselect137=collectionFunctionOrSubselect();
					PopFollow();

					adaptor.AddChild(root_1, collectionFunctionOrSubselect137.Tree);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(49); }


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    PrepareLogicOperator( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("comparisonExpr", 39);
			LeaveRule("comparisonExpr", 39);
			LeaveRule_comparisonExpr();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "comparisonExpr"); }
		return retval;

	}
	// $ANTLR end "comparisonExpr"

	partial void EnterRule_inRhs();
	partial void LeaveRule_inRhs();
	// $ANTLR start "inRhs"
	// HqlSqlWalker.g:371:1: inRhs : ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) ) ;
	[GrammarRule("inRhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs()
	{
		EnterRule_inRhs();
		EnterRule("inRhs", 40);
		TraceIn("inRhs", 40);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode IN_LIST138 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect139 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr140 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode IN_LIST138_tree = default(IASTNode);
			int UP = 99999;		// TODO - added this to get compile working.  It's bogus & should be removed
			
		try { DebugEnterRule(GrammarFileName, "inRhs");
		DebugLocation(371, 1);
		try
		{
			// HqlSqlWalker.g:373:2: ( ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:373:4: ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(373, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(373, 6);

			_last = (IASTNode)input.LT(1);
			IN_LIST138=(IASTNode)Match(input,IN_LIST,Follow._IN_LIST_in_inRhs1889); 
			IN_LIST138_tree = (IASTNode)adaptor.DupNode(IN_LIST138);


			root_1 = (IASTNode)adaptor.BecomeRoot(IN_LIST138_tree, root_1);


			if (input.LA(1) == TokenTypes.Down) {
				Match(input, TokenTypes.Down, null); 
				DebugLocation(373, 14);
				// HqlSqlWalker.g:373:14: ( collectionFunctionOrSubselect | ( expr )* )
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==ELEMENTS||LA51_1==INDICES||LA51_1==QUERY||LA51_1==UNION))
				{
					alt51 = 1;
				}
				else if (((LA51_1>=UP && LA51_1<=AGGREGATE)||LA51_1==BAND||(LA51_1>=BNOT && LA51_1<=BOR)||(LA51_1>=BXOR && LA51_1<=CASE2)||LA51_1==COLON||LA51_1==COUNT||(LA51_1>=DIV && LA51_1<=DOT)||LA51_1==FALSE||LA51_1==IDENT||LA51_1==INDEX_OP||LA51_1==JAVA_CONSTANT||LA51_1==METHOD_CALL||LA51_1==MINUS||(LA51_1>=NULL && LA51_1<=NUM_LONG)||(LA51_1>=PARAM && LA51_1<=PLUS)||LA51_1==QUOTED_String||LA51_1==STAR||(LA51_1>=TRUE && LA51_1<=UNARY_MINUS)||LA51_1==VECTOR_EXPR||LA51_1==WEIRD_IDENT))
				{
					alt51 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:373:16: collectionFunctionOrSubselect
					{
					DebugLocation(373, 16);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._collectionFunctionOrSubselect_in_inRhs1893);
					collectionFunctionOrSubselect139=collectionFunctionOrSubselect();
					PopFollow();

					adaptor.AddChild(root_1, collectionFunctionOrSubselect139.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:373:48: ( expr )*
					{
					DebugLocation(373, 48);
					// HqlSqlWalker.g:373:48: ( expr )*
					try { DebugEnterSubRule(50);
					while (true)
					{
						int alt50=2;
						try { DebugEnterDecision(50, false);
						int LA50_1 = input.LA(1);

						if ((LA50_1==AGGREGATE||LA50_1==BAND||(LA50_1>=BNOT && LA50_1<=BOR)||(LA50_1>=BXOR && LA50_1<=CASE2)||LA50_1==COLON||LA50_1==COUNT||(LA50_1>=DIV && LA50_1<=DOT)||LA50_1==FALSE||LA50_1==IDENT||LA50_1==INDEX_OP||LA50_1==JAVA_CONSTANT||LA50_1==METHOD_CALL||LA50_1==MINUS||(LA50_1>=NULL && LA50_1<=NUM_LONG)||(LA50_1>=PARAM && LA50_1<=PLUS)||LA50_1==QUOTED_String||LA50_1==STAR||(LA50_1>=TRUE && LA50_1<=UNARY_MINUS)||LA50_1==VECTOR_EXPR||LA50_1==WEIRD_IDENT))
						{
							alt50 = 1;
						}


						} finally { DebugExitDecision(50); }
						switch ( alt50 )
						{
						case 1:
							DebugEnterAlt(1);
							// HqlSqlWalker.g:373:48: expr
							{
							DebugLocation(373, 48);

							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._expr_in_inRhs1897);
							expr140=expr();
							PopFollow();

							adaptor.AddChild(root_1, expr140.Tree);


							}
							break;

						default:
							goto loop50;
						}
					}

					loop50:
						;

					} finally { DebugExitSubRule(50); }


					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				Match(input, TokenTypes.Up, null); 
			}
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inRhs", 40);
			LeaveRule("inRhs", 40);
			LeaveRule_inRhs();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "inRhs"); }
		return retval;

	}
	// $ANTLR end "inRhs"

	partial void EnterRule_exprOrSubquery();
	partial void LeaveRule_exprOrSubquery();
	// $ANTLR start "exprOrSubquery"
	// HqlSqlWalker.g:376:1: exprOrSubquery : ( expr | query | ^( ANY collectionFunctionOrSubselect ) | ^( ALL collectionFunctionOrSubselect ) | ^( SOME collectionFunctionOrSubselect ) );
	[GrammarRule("exprOrSubquery")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery()
	{
		EnterRule_exprOrSubquery();
		EnterRule("exprOrSubquery", 41);
		TraceIn("exprOrSubquery", 41);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode ANY143 = default(IASTNode);
		IASTNode ALL145 = default(IASTNode);
		IASTNode SOME147 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr141 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query142 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect144 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect146 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect148 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode ANY143_tree = default(IASTNode);
		IASTNode ALL145_tree = default(IASTNode);
		IASTNode SOME147_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "exprOrSubquery");
		DebugLocation(376, 1);
		try
		{
			// HqlSqlWalker.g:377:2: ( expr | query | ^( ANY collectionFunctionOrSubselect ) | ^( ALL collectionFunctionOrSubselect ) | ^( SOME collectionFunctionOrSubselect ) )
			int alt52=5;
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case AGGREGATE:
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case COLON:
			case COUNT:
			case DIV:
			case DOT:
			case FALSE:
			case IDENT:
			case INDEX_OP:
			case JAVA_CONSTANT:
			case METHOD_CALL:
			case MINUS:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case PARAM:
			case PLUS:
			case QUOTED_String:
			case STAR:
			case TRUE:
			case UNARY_MINUS:
			case VECTOR_EXPR:
			case WEIRD_IDENT:
				{
				alt52 = 1;
				}
				break;
			case QUERY:
			case UNION:
				{
				alt52 = 2;
				}
				break;
			case ANY:
				{
				alt52 = 3;
				}
				break;
			case ALL:
				{
				alt52 = 4;
				}
				break;
			case SOME:
				{
				alt52 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:377:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(377, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_exprOrSubquery1913);
				expr141=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr141.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:378:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(378, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_exprOrSubquery1918);
				query142=query();
				PopFollow();

				adaptor.AddChild(root_0, query142.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:379:4: ^( ANY collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(379, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(379, 6);

				_last = (IASTNode)input.LT(1);
				ANY143=(IASTNode)Match(input,ANY,Follow._ANY_in_exprOrSubquery1924); 
				ANY143_tree = (IASTNode)adaptor.DupNode(ANY143);


				root_1 = (IASTNode)adaptor.BecomeRoot(ANY143_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(379, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1926);
				collectionFunctionOrSubselect144=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect144.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:380:4: ^( ALL collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(380, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(380, 6);

				_last = (IASTNode)input.LT(1);
				ALL145=(IASTNode)Match(input,ALL,Follow._ALL_in_exprOrSubquery1933); 
				ALL145_tree = (IASTNode)adaptor.DupNode(ALL145);


				root_1 = (IASTNode)adaptor.BecomeRoot(ALL145_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(380, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1935);
				collectionFunctionOrSubselect146=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect146.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:381:4: ^( SOME collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(381, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(381, 6);

				_last = (IASTNode)input.LT(1);
				SOME147=(IASTNode)Match(input,SOME,Follow._SOME_in_exprOrSubquery1942); 
				SOME147_tree = (IASTNode)adaptor.DupNode(SOME147);


				root_1 = (IASTNode)adaptor.BecomeRoot(SOME147_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(381, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1944);
				collectionFunctionOrSubselect148=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect148.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exprOrSubquery", 41);
			LeaveRule("exprOrSubquery", 41);
			LeaveRule_exprOrSubquery();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "exprOrSubquery"); }
		return retval;

	}
	// $ANTLR end "exprOrSubquery"

	partial void EnterRule_collectionFunctionOrSubselect();
	partial void LeaveRule_collectionFunctionOrSubselect();
	// $ANTLR start "collectionFunctionOrSubselect"
	// HqlSqlWalker.g:384:1: collectionFunctionOrSubselect : ( collectionFunction | query );
	[GrammarRule("collectionFunctionOrSubselect")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect()
	{
		EnterRule_collectionFunctionOrSubselect();
		EnterRule("collectionFunctionOrSubselect", 42);
		TraceIn("collectionFunctionOrSubselect", 42);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction149 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query150 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "collectionFunctionOrSubselect");
		DebugLocation(384, 1);
		try
		{
			// HqlSqlWalker.g:385:2: ( collectionFunction | query )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_1 = input.LA(1);

			if ((LA53_1==ELEMENTS||LA53_1==INDICES))
			{
				alt53 = 1;
			}
			else if ((LA53_1==QUERY||LA53_1==UNION))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:385:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(385, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_collectionFunctionOrSubselect1957);
				collectionFunction149=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction149.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:386:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(386, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_collectionFunctionOrSubselect1962);
				query150=query();
				PopFollow();

				adaptor.AddChild(root_0, query150.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionFunctionOrSubselect", 42);
			LeaveRule("collectionFunctionOrSubselect", 42);
			LeaveRule_collectionFunctionOrSubselect();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionFunctionOrSubselect"); }
		return retval;

	}
	// $ANTLR end "collectionFunctionOrSubselect"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// HqlSqlWalker.g:389:1: expr : (ae= addrExpr[ true ] | ^( VECTOR_EXPR ( expr )* ) | constant | arithmeticExpr | functionCall | parameter | count );
	[GrammarRule("expr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 43);
		TraceIn("expr", 43);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode VECTOR_EXPR151 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ae = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr152 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> constant153 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr154 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall155 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter156 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> count157 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode VECTOR_EXPR151_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(389, 1);
		try
		{
			// HqlSqlWalker.g:390:2: (ae= addrExpr[ true ] | ^( VECTOR_EXPR ( expr )* ) | constant | arithmeticExpr | functionCall | parameter | count )
			int alt55=7;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case DOT:
			case IDENT:
			case INDEX_OP:
			case WEIRD_IDENT:
				{
				alt55 = 1;
				}
				break;
			case VECTOR_EXPR:
				{
				alt55 = 2;
				}
				break;
			case FALSE:
			case JAVA_CONSTANT:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
			case TRUE:
				{
				alt55 = 3;
				}
				break;
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case DIV:
			case MINUS:
			case PLUS:
			case STAR:
			case UNARY_MINUS:
				{
				alt55 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt55 = 5;
				}
				break;
			case COLON:
			case PARAM:
				{
				alt55 = 6;
				}
				break;
			case COUNT:
				{
				alt55 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:390:4: ae= addrExpr[ true ]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(390, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExpr_in_expr1976);
				ae=addrExpr(true);
				PopFollow();

				adaptor.AddChild(root_0, ae.Tree);

				DebugLocation(390, 25);
				 Resolve((ae!=null?((IASTNode)ae.Tree):default(IASTNode))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:391:4: ^( VECTOR_EXPR ( expr )* )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(391, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(391, 7);

				_last = (IASTNode)input.LT(1);
				VECTOR_EXPR151=(IASTNode)Match(input,VECTOR_EXPR,Follow._VECTOR_EXPR_in_expr1988); 
				VECTOR_EXPR151_tree = (IASTNode)adaptor.DupNode(VECTOR_EXPR151);


				root_1 = (IASTNode)adaptor.BecomeRoot(VECTOR_EXPR151_tree, root_1);


				if (input.LA(1) == TokenTypes.Down) {
					Match(input, TokenTypes.Down, null); 
					DebugLocation(391, 19);
					// HqlSqlWalker.g:391:19: ( expr )*
					try { DebugEnterSubRule(54);
					while (true)
					{
						int alt54=2;
						try { DebugEnterDecision(54, false);
						int LA54_1 = input.LA(1);

						if ((LA54_1==AGGREGATE||LA54_1==BAND||(LA54_1>=BNOT && LA54_1<=BOR)||(LA54_1>=BXOR && LA54_1<=CASE2)||LA54_1==COLON||LA54_1==COUNT||(LA54_1>=DIV && LA54_1<=DOT)||LA54_1==FALSE||LA54_1==IDENT||LA54_1==INDEX_OP||LA54_1==JAVA_CONSTANT||LA54_1==METHOD_CALL||LA54_1==MINUS||(LA54_1>=NULL && LA54_1<=NUM_LONG)||(LA54_1>=PARAM && LA54_1<=PLUS)||LA54_1==QUOTED_String||LA54_1==STAR||(LA54_1>=TRUE && LA54_1<=UNARY_MINUS)||LA54_1==VECTOR_EXPR||LA54_1==WEIRD_IDENT))
						{
							alt54 = 1;
						}


						} finally { DebugExitDecision(54); }
						switch ( alt54 )
						{
						case 1:
							DebugEnterAlt(1);
							// HqlSqlWalker.g:391:20: expr
							{
							DebugLocation(391, 20);

							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._expr_in_expr1991);
							expr152=expr();
							PopFollow();

							adaptor.AddChild(root_1, expr152.Tree);


							}
							break;

						default:
							goto loop54;
						}
					}

					loop54:
						;

					} finally { DebugExitSubRule(54); }


					Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:392:4: constant
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(392, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._constant_in_expr2000);
				constant153=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant153.Tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:393:4: arithmeticExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(393, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._arithmeticExpr_in_expr2005);
				arithmeticExpr154=arithmeticExpr();
				PopFollow();

				adaptor.AddChild(root_0, arithmeticExpr154.Tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:394:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(394, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_expr2010);
				functionCall155=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall155.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:395:4: parameter
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(395, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_expr2022);
				parameter156=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter156.Tree);


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:396:4: count
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(396, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._count_in_expr2027);
				count157=count();
				PopFollow();

				adaptor.AddChild(root_0, count157.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 43);
			LeaveRule("expr", 43);
			LeaveRule_expr();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_arithmeticExpr();
	partial void LeaveRule_arithmeticExpr();
	// $ANTLR start "arithmeticExpr"
	// HqlSqlWalker.g:399:1: arithmeticExpr : ( ^( PLUS exprOrSubquery exprOrSubquery ) | ^( MINUS exprOrSubquery exprOrSubquery ) | ^( DIV exprOrSubquery exprOrSubquery ) | ^( STAR exprOrSubquery exprOrSubquery ) | ^( BNOT exprOrSubquery ) | ^( BAND exprOrSubquery exprOrSubquery ) | ^( BOR exprOrSubquery exprOrSubquery ) | ^( BXOR exprOrSubquery exprOrSubquery ) | ^( UNARY_MINUS exprOrSubquery ) |c= caseExpr );
	[GrammarRule("arithmeticExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr()
	{
		EnterRule_arithmeticExpr();
		EnterRule("arithmeticExpr", 44);
		TraceIn("arithmeticExpr", 44);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode PLUS158 = default(IASTNode);
		IASTNode MINUS161 = default(IASTNode);
		IASTNode DIV164 = default(IASTNode);
		IASTNode STAR167 = default(IASTNode);
		IASTNode BNOT170 = default(IASTNode);
		IASTNode BAND172 = default(IASTNode);
		IASTNode BOR175 = default(IASTNode);
		IASTNode BXOR178 = default(IASTNode);
		IASTNode UNARY_MINUS181 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> c = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery159 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery160 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery162 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery163 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery165 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery166 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery168 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery169 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery171 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery173 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery174 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery176 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery177 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery179 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery180 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery182 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode PLUS158_tree = default(IASTNode);
		IASTNode MINUS161_tree = default(IASTNode);
		IASTNode DIV164_tree = default(IASTNode);
		IASTNode STAR167_tree = default(IASTNode);
		IASTNode BNOT170_tree = default(IASTNode);
		IASTNode BAND172_tree = default(IASTNode);
		IASTNode BOR175_tree = default(IASTNode);
		IASTNode BXOR178_tree = default(IASTNode);
		IASTNode UNARY_MINUS181_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "arithmeticExpr");
		DebugLocation(399, 1);
		try
		{
			// HqlSqlWalker.g:406:2: ( ^( PLUS exprOrSubquery exprOrSubquery ) | ^( MINUS exprOrSubquery exprOrSubquery ) | ^( DIV exprOrSubquery exprOrSubquery ) | ^( STAR exprOrSubquery exprOrSubquery ) | ^( BNOT exprOrSubquery ) | ^( BAND exprOrSubquery exprOrSubquery ) | ^( BOR exprOrSubquery exprOrSubquery ) | ^( BXOR exprOrSubquery exprOrSubquery ) | ^( UNARY_MINUS exprOrSubquery ) |c= caseExpr )
			int alt56=10;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt56 = 1;
				}
				break;
			case MINUS:
				{
				alt56 = 2;
				}
				break;
			case DIV:
				{
				alt56 = 3;
				}
				break;
			case STAR:
				{
				alt56 = 4;
				}
				break;
			case BNOT:
				{
				alt56 = 5;
				}
				break;
			case BAND:
				{
				alt56 = 6;
				}
				break;
			case BOR:
				{
				alt56 = 7;
				}
				break;
			case BXOR:
				{
				alt56 = 8;
				}
				break;
			case UNARY_MINUS:
				{
				alt56 = 9;
				}
				break;
			case CASE:
			case CASE2:
				{
				alt56 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:406:4: ^( PLUS exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(406, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(406, 6);

				_last = (IASTNode)input.LT(1);
				PLUS158=(IASTNode)Match(input,PLUS,Follow._PLUS_in_arithmeticExpr2055); 
				PLUS158_tree = (IASTNode)adaptor.DupNode(PLUS158);


				root_1 = (IASTNode)adaptor.BecomeRoot(PLUS158_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(406, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2057);
				exprOrSubquery159=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery159.Tree);

				DebugLocation(406, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2059);
				exprOrSubquery160=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery160.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:407:4: ^( MINUS exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(407, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(407, 6);

				_last = (IASTNode)input.LT(1);
				MINUS161=(IASTNode)Match(input,MINUS,Follow._MINUS_in_arithmeticExpr2066); 
				MINUS161_tree = (IASTNode)adaptor.DupNode(MINUS161);


				root_1 = (IASTNode)adaptor.BecomeRoot(MINUS161_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(407, 12);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2068);
				exprOrSubquery162=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery162.Tree);

				DebugLocation(407, 27);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2070);
				exprOrSubquery163=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery163.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:408:4: ^( DIV exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(408, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(408, 6);

				_last = (IASTNode)input.LT(1);
				DIV164=(IASTNode)Match(input,DIV,Follow._DIV_in_arithmeticExpr2077); 
				DIV164_tree = (IASTNode)adaptor.DupNode(DIV164);


				root_1 = (IASTNode)adaptor.BecomeRoot(DIV164_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(408, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2079);
				exprOrSubquery165=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery165.Tree);

				DebugLocation(408, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2081);
				exprOrSubquery166=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery166.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:409:4: ^( STAR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(409, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(409, 6);

				_last = (IASTNode)input.LT(1);
				STAR167=(IASTNode)Match(input,STAR,Follow._STAR_in_arithmeticExpr2088); 
				STAR167_tree = (IASTNode)adaptor.DupNode(STAR167);


				root_1 = (IASTNode)adaptor.BecomeRoot(STAR167_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(409, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2090);
				exprOrSubquery168=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery168.Tree);

				DebugLocation(409, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2092);
				exprOrSubquery169=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery169.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:410:4: ^( BNOT exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(410, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(410, 6);

				_last = (IASTNode)input.LT(1);
				BNOT170=(IASTNode)Match(input,BNOT,Follow._BNOT_in_arithmeticExpr2099); 
				BNOT170_tree = (IASTNode)adaptor.DupNode(BNOT170);


				root_1 = (IASTNode)adaptor.BecomeRoot(BNOT170_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(410, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2101);
				exprOrSubquery171=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery171.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:411:4: ^( BAND exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(411, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(411, 6);

				_last = (IASTNode)input.LT(1);
				BAND172=(IASTNode)Match(input,BAND,Follow._BAND_in_arithmeticExpr2108); 
				BAND172_tree = (IASTNode)adaptor.DupNode(BAND172);


				root_1 = (IASTNode)adaptor.BecomeRoot(BAND172_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(411, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2110);
				exprOrSubquery173=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery173.Tree);

				DebugLocation(411, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2112);
				exprOrSubquery174=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery174.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:412:4: ^( BOR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(412, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(412, 6);

				_last = (IASTNode)input.LT(1);
				BOR175=(IASTNode)Match(input,BOR,Follow._BOR_in_arithmeticExpr2119); 
				BOR175_tree = (IASTNode)adaptor.DupNode(BOR175);


				root_1 = (IASTNode)adaptor.BecomeRoot(BOR175_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(412, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2121);
				exprOrSubquery176=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery176.Tree);

				DebugLocation(412, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2123);
				exprOrSubquery177=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery177.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:413:4: ^( BXOR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(413, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(413, 6);

				_last = (IASTNode)input.LT(1);
				BXOR178=(IASTNode)Match(input,BXOR,Follow._BXOR_in_arithmeticExpr2130); 
				BXOR178_tree = (IASTNode)adaptor.DupNode(BXOR178);


				root_1 = (IASTNode)adaptor.BecomeRoot(BXOR178_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(413, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2132);
				exprOrSubquery179=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery179.Tree);

				DebugLocation(413, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2134);
				exprOrSubquery180=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery180.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:415:4: ^( UNARY_MINUS exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(415, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(415, 6);

				_last = (IASTNode)input.LT(1);
				UNARY_MINUS181=(IASTNode)Match(input,UNARY_MINUS,Follow._UNARY_MINUS_in_arithmeticExpr2142); 
				UNARY_MINUS181_tree = (IASTNode)adaptor.DupNode(UNARY_MINUS181);


				root_1 = (IASTNode)adaptor.BecomeRoot(UNARY_MINUS181_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(415, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2144);
				exprOrSubquery182=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery182.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:416:4: c= caseExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(416, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._caseExpr_in_arithmeticExpr2152);
				c=caseExpr();
				PopFollow();

				adaptor.AddChild(root_0, c.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					if ((c!=null?((IASTNode)c.Tree):default(IASTNode)) == null)
					{
						PrepareArithmeticOperator( retval.Tree );
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arithmeticExpr", 44);
			LeaveRule("arithmeticExpr", 44);
			LeaveRule_arithmeticExpr();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "arithmeticExpr"); }
		return retval;

	}
	// $ANTLR end "arithmeticExpr"

	partial void EnterRule_caseExpr();
	partial void LeaveRule_caseExpr();
	// $ANTLR start "caseExpr"
	// HqlSqlWalker.g:419:1: caseExpr : ( ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? ) | ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? ) );
	[GrammarRule("caseExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> caseExpr()
	{
		EnterRule_caseExpr();
		EnterRule("caseExpr", 45);
		TraceIn("caseExpr", 45);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode CASE183 = default(IASTNode);
		IASTNode WHEN184 = default(IASTNode);
		IASTNode ELSE187 = default(IASTNode);
		IASTNode CASE2189 = default(IASTNode);
		IASTNode WHEN191 = default(IASTNode);
		IASTNode ELSE194 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr185 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr186 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr188 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr190 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr192 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr193 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr195 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode CASE183_tree = default(IASTNode);
		IASTNode WHEN184_tree = default(IASTNode);
		IASTNode ELSE187_tree = default(IASTNode);
		IASTNode CASE2189_tree = default(IASTNode);
		IASTNode WHEN191_tree = default(IASTNode);
		IASTNode ELSE194_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "caseExpr");
		DebugLocation(419, 1);
		try
		{
			// HqlSqlWalker.g:420:2: ( ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? ) | ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? ) )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==CASE))
			{
				alt61 = 1;
			}
			else if ((LA61_1==CASE2))
			{
				alt61 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:420:4: ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(420, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(420, 6);

				_last = (IASTNode)input.LT(1);
				CASE183=(IASTNode)Match(input,CASE,Follow._CASE_in_caseExpr2164); 
				CASE183_tree = (IASTNode)adaptor.DupNode(CASE183);


				root_1 = (IASTNode)adaptor.BecomeRoot(CASE183_tree, root_1);


				DebugLocation(420, 11);
				 _inCase = true; 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(420, 31);
				// HqlSqlWalker.g:420:31: ( ^( WHEN logicalExpr expr ) )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_1 = input.LA(1);

					if ((LA57_1==WHEN))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:420:32: ^( WHEN logicalExpr expr )
						{
						DebugLocation(420, 32);

						_last = (IASTNode)input.LT(1);
						{
						IASTNode _save_last_2 = _last;
						IASTNode _first_2 = default(IASTNode);
						IASTNode root_2 = (IASTNode)adaptor.Nil();
						DebugLocation(420, 34);

						_last = (IASTNode)input.LT(1);
						WHEN184=(IASTNode)Match(input,WHEN,Follow._WHEN_in_caseExpr2170); 
						WHEN184_tree = (IASTNode)adaptor.DupNode(WHEN184);


						root_2 = (IASTNode)adaptor.BecomeRoot(WHEN184_tree, root_2);


						Match(input, TokenTypes.Down, null); 
						DebugLocation(420, 39);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._logicalExpr_in_caseExpr2172);
						logicalExpr185=logicalExpr();
						PopFollow();

						adaptor.AddChild(root_2, logicalExpr185.Tree);

						DebugLocation(420, 51);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2174);
						expr186=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr186.Tree);


						Match(input, TokenTypes.Up, null); 
						adaptor.AddChild(root_1, root_2);
						_last = _save_last_2;
						}


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(420, 59);
				// HqlSqlWalker.g:420:59: ( ^( ELSE expr ) )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if ((LA58_1==ELSE))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:420:60: ^( ELSE expr )
					{
					DebugLocation(420, 60);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(420, 62);

					_last = (IASTNode)input.LT(1);
					ELSE187=(IASTNode)Match(input,ELSE,Follow._ELSE_in_caseExpr2181); 
					ELSE187_tree = (IASTNode)adaptor.DupNode(ELSE187);


					root_2 = (IASTNode)adaptor.BecomeRoot(ELSE187_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(420, 67);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_caseExpr2183);
					expr188=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr188.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(420, 76);
				 _inCase = false; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:421:4: ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(421, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(421, 6);

				_last = (IASTNode)input.LT(1);
				CASE2189=(IASTNode)Match(input,CASE2,Follow._CASE2_in_caseExpr2195); 
				CASE2189_tree = (IASTNode)adaptor.DupNode(CASE2189);


				root_1 = (IASTNode)adaptor.BecomeRoot(CASE2189_tree, root_1);


				DebugLocation(421, 12);
				 _inCase = true; 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(421, 32);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_caseExpr2199);
				expr190=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr190.Tree);

				DebugLocation(421, 37);
				// HqlSqlWalker.g:421:37: ( ^( WHEN expr expr ) )+
				int cnt59=0;
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==WHEN))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch (alt59)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:421:38: ^( WHEN expr expr )
						{
						DebugLocation(421, 38);

						_last = (IASTNode)input.LT(1);
						{
						IASTNode _save_last_2 = _last;
						IASTNode _first_2 = default(IASTNode);
						IASTNode root_2 = (IASTNode)adaptor.Nil();
						DebugLocation(421, 40);

						_last = (IASTNode)input.LT(1);
						WHEN191=(IASTNode)Match(input,WHEN,Follow._WHEN_in_caseExpr2203); 
						WHEN191_tree = (IASTNode)adaptor.DupNode(WHEN191);


						root_2 = (IASTNode)adaptor.BecomeRoot(WHEN191_tree, root_2);


						Match(input, TokenTypes.Down, null); 
						DebugLocation(421, 45);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2205);
						expr192=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr192.Tree);

						DebugLocation(421, 50);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2207);
						expr193=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr193.Tree);


						Match(input, TokenTypes.Up, null); 
						adaptor.AddChild(root_1, root_2);
						_last = _save_last_2;
						}


						}
						break;

					default:
						if (cnt59 >= 1)
							goto loop59;

						EarlyExitException eee59 = new EarlyExitException( 59, input );
						DebugRecognitionException(eee59);
						throw eee59;
					}
					cnt59++;
				}
				loop59:
					;

				} finally { DebugExitSubRule(59); }

				DebugLocation(421, 58);
				// HqlSqlWalker.g:421:58: ( ^( ELSE expr ) )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==ELSE))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:421:59: ^( ELSE expr )
					{
					DebugLocation(421, 59);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(421, 61);

					_last = (IASTNode)input.LT(1);
					ELSE194=(IASTNode)Match(input,ELSE,Follow._ELSE_in_caseExpr2214); 
					ELSE194_tree = (IASTNode)adaptor.DupNode(ELSE194);


					root_2 = (IASTNode)adaptor.BecomeRoot(ELSE194_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(421, 66);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_caseExpr2216);
					expr195=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr195.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(421, 75);
				 _inCase = false; 

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseExpr", 45);
			LeaveRule("caseExpr", 45);
			LeaveRule_caseExpr();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpr"); }
		return retval;

	}
	// $ANTLR end "caseExpr"

	partial void EnterRule_collectionFunction();
	partial void LeaveRule_collectionFunction();
	// $ANTLR start "collectionFunction"
	// HqlSqlWalker.g:426:1: collectionFunction : ( ^(e= ELEMENTS p1= propertyRef ) | ^(i= INDICES p2= propertyRef ) );
	[GrammarRule("collectionFunction")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction()
	{
		EnterRule_collectionFunction();
		EnterRule("collectionFunction", 46);
		TraceIn("collectionFunction", 46);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode e = default(IASTNode);
		IASTNode i = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p1 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode e_tree = default(IASTNode);
		IASTNode i_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "collectionFunction");
		DebugLocation(426, 1);
		try
		{
			// HqlSqlWalker.g:427:2: ( ^(e= ELEMENTS p1= propertyRef ) | ^(i= INDICES p2= propertyRef ) )
			int alt62=2;
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==ELEMENTS))
			{
				alt62 = 1;
			}
			else if ((LA62_1==INDICES))
			{
				alt62 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:427:4: ^(e= ELEMENTS p1= propertyRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(427, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(427, 7);

				_last = (IASTNode)input.LT(1);
				e=(IASTNode)Match(input,ELEMENTS,Follow._ELEMENTS_in_collectionFunction2238); 
				e_tree = (IASTNode)adaptor.DupNode(e);


				root_1 = (IASTNode)adaptor.BecomeRoot(e_tree, root_1);


				DebugLocation(427, 17);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(427, 43);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_collectionFunction2244);
				p1=propertyRef();
				PopFollow();

				adaptor.AddChild(root_1, p1.Tree);

				DebugLocation(427, 56);
				 Resolve((p1!=null?((IASTNode)p1.Tree):default(IASTNode))); 

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(428, 3);
				 ProcessFunction(e_tree,_inSelect); 
				DebugLocation(428, 43);
				_inFunctionCall=false;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:429:4: ^(i= INDICES p2= propertyRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(429, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(429, 7);

				_last = (IASTNode)input.LT(1);
				i=(IASTNode)Match(input,INDICES,Follow._INDICES_in_collectionFunction2263); 
				i_tree = (IASTNode)adaptor.DupNode(i);


				root_1 = (IASTNode)adaptor.BecomeRoot(i_tree, root_1);


				DebugLocation(429, 16);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(429, 42);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_collectionFunction2269);
				p2=propertyRef();
				PopFollow();

				adaptor.AddChild(root_1, p2.Tree);

				DebugLocation(429, 55);
				 Resolve((p2!=null?((IASTNode)p2.Tree):default(IASTNode))); 

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(430, 3);
				 ProcessFunction(i_tree,_inSelect); 
				DebugLocation(430, 43);
				_inFunctionCall=false;

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionFunction", 46);
			LeaveRule("collectionFunction", 46);
			LeaveRule_collectionFunction();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionFunction"); }
		return retval;

	}
	// $ANTLR end "collectionFunction"

	partial void EnterRule_functionCall();
	partial void LeaveRule_functionCall();
	// $ANTLR start "functionCall"
	// HqlSqlWalker.g:433:1: functionCall : ( ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? ) | ^( AGGREGATE aggregateExpr ) );
	[GrammarRule("functionCall")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall()
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 47);
		TraceIn("functionCall", 47);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode m = default(IASTNode);
		IASTNode EXPR_LIST197 = default(IASTNode);
		IASTNode AGGREGATE201 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> pathAsIdent196 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr198 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query199 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr200 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr202 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode m_tree = default(IASTNode);
		IASTNode EXPR_LIST197_tree = default(IASTNode);
		IASTNode AGGREGATE201_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(433, 1);
		try
		{
			// HqlSqlWalker.g:434:2: ( ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? ) | ^( AGGREGATE aggregateExpr ) )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_1 = input.LA(1);

			if ((LA65_1==METHOD_CALL))
			{
				alt65 = 1;
			}
			else if ((LA65_1==AGGREGATE))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:434:4: ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(434, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(434, 7);

				_last = (IASTNode)input.LT(1);
				m=(IASTNode)Match(input,METHOD_CALL,Follow._METHOD_CALL_in_functionCall2294); 
				m_tree = (IASTNode)adaptor.DupNode(m);


				root_1 = (IASTNode)adaptor.BecomeRoot(m_tree, root_1);


				DebugLocation(434, 21);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(434, 45);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._pathAsIdent_in_functionCall2299);
				pathAsIdent196=pathAsIdent();
				PopFollow();

				adaptor.AddChild(root_1, pathAsIdent196.Tree);

				DebugLocation(434, 57);
				// HqlSqlWalker.g:434:57: ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )?
				int alt64=2;
				try { DebugEnterSubRule(64);
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==EXPR_LIST))
				{
					alt64 = 1;
				}
				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:434:59: ^( EXPR_LIST ( expr | query | comparisonExpr )* )
					{
					DebugLocation(434, 59);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(434, 61);

					_last = (IASTNode)input.LT(1);
					EXPR_LIST197=(IASTNode)Match(input,EXPR_LIST,Follow._EXPR_LIST_in_functionCall2304); 
					EXPR_LIST197_tree = (IASTNode)adaptor.DupNode(EXPR_LIST197);


					root_2 = (IASTNode)adaptor.BecomeRoot(EXPR_LIST197_tree, root_2);


					if (input.LA(1) == TokenTypes.Down) {
						Match(input, TokenTypes.Down, null); 
						DebugLocation(434, 71);
						// HqlSqlWalker.g:434:71: ( expr | query | comparisonExpr )*
						try { DebugEnterSubRule(63);
						while (true)
						{
							int alt63=4;
							try { DebugEnterDecision(63, false);
							switch (input.LA(1))
							{
							case AGGREGATE:
							case BAND:
							case BNOT:
							case BOR:
							case BXOR:
							case CASE:
							case CASE2:
							case COLON:
							case COUNT:
							case DIV:
							case DOT:
							case FALSE:
							case IDENT:
							case INDEX_OP:
							case JAVA_CONSTANT:
							case METHOD_CALL:
							case MINUS:
							case NULL:
							case NUM_DECIMAL:
							case NUM_DOUBLE:
							case NUM_FLOAT:
							case NUM_INT:
							case NUM_LONG:
							case PARAM:
							case PLUS:
							case QUOTED_String:
							case STAR:
							case TRUE:
							case UNARY_MINUS:
							case VECTOR_EXPR:
							case WEIRD_IDENT:
								{
								alt63 = 1;
								}
								break;
							case QUERY:
							case UNION:
								{
								alt63 = 2;
								}
								break;
							case BETWEEN:
							case EQ:
							case EXISTS:
							case GE:
							case GT:
							case IN:
							case IS_NOT_NULL:
							case IS_NULL:
							case LE:
							case LIKE:
							case LT:
							case NE:
							case NOT_BETWEEN:
							case NOT_IN:
							case NOT_LIKE:
								{
								alt63 = 3;
								}
								break;
							}

							} finally { DebugExitDecision(63); }
							switch ( alt63 )
							{
							case 1:
								DebugEnterAlt(1);
								// HqlSqlWalker.g:434:72: expr
								{
								DebugLocation(434, 72);

								_last = (IASTNode)input.LT(1);
								PushFollow(Follow._expr_in_functionCall2307);
								expr198=expr();
								PopFollow();

								adaptor.AddChild(root_2, expr198.Tree);


								}
								break;
							case 2:
								DebugEnterAlt(2);
								// HqlSqlWalker.g:434:79: query
								{
								DebugLocation(434, 79);

								_last = (IASTNode)input.LT(1);
								PushFollow(Follow._query_in_functionCall2311);
								query199=query();
								PopFollow();

								adaptor.AddChild(root_2, query199.Tree);


								}
								break;
							case 3:
								DebugEnterAlt(3);
								// HqlSqlWalker.g:434:87: comparisonExpr
								{
								DebugLocation(434, 87);

								_last = (IASTNode)input.LT(1);
								PushFollow(Follow._comparisonExpr_in_functionCall2315);
								comparisonExpr200=comparisonExpr();
								PopFollow();

								adaptor.AddChild(root_2, comparisonExpr200.Tree);


								}
								break;

							default:
								goto loop63;
							}
						}

						loop63:
							;

						} finally { DebugExitSubRule(63); }


						Match(input, TokenTypes.Up, null); 
					}
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(64); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(435, 3);
				 ProcessFunction(m_tree,_inSelect); _inFunctionCall=false; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:436:4: ^( AGGREGATE aggregateExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(436, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(436, 6);

				_last = (IASTNode)input.LT(1);
				AGGREGATE201=(IASTNode)Match(input,AGGREGATE,Follow._AGGREGATE_in_functionCall2334); 
				AGGREGATE201_tree = (IASTNode)adaptor.DupNode(AGGREGATE201);


				root_1 = (IASTNode)adaptor.BecomeRoot(AGGREGATE201_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(436, 16);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aggregateExpr_in_functionCall2336);
				aggregateExpr202=aggregateExpr();
				PopFollow();

				adaptor.AddChild(root_1, aggregateExpr202.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionCall", 47);
			LeaveRule("functionCall", 47);
			LeaveRule_functionCall();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return retval;

	}
	// $ANTLR end "functionCall"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// HqlSqlWalker.g:439:1: constant : ( literal | NULL |t= TRUE |f= FALSE | JAVA_CONSTANT );
	[GrammarRule("constant")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 48);
		TraceIn("constant", 48);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode t = default(IASTNode);
		IASTNode f = default(IASTNode);
		IASTNode NULL204 = default(IASTNode);
		IASTNode JAVA_CONSTANT205 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> literal203 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode t_tree = default(IASTNode);
		IASTNode f_tree = default(IASTNode);
		IASTNode NULL204_tree = default(IASTNode);
		IASTNode JAVA_CONSTANT205_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(439, 1);
		try
		{
			// HqlSqlWalker.g:440:2: ( literal | NULL |t= TRUE |f= FALSE | JAVA_CONSTANT )
			int alt66=5;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
				{
				alt66 = 1;
				}
				break;
			case NULL:
				{
				alt66 = 2;
				}
				break;
			case TRUE:
				{
				alt66 = 3;
				}
				break;
			case FALSE:
				{
				alt66 = 4;
				}
				break;
			case JAVA_CONSTANT:
				{
				alt66 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:440:4: literal
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(440, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._literal_in_constant2349);
				literal203=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal203.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:441:4: NULL
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(441, 4);

				_last = (IASTNode)input.LT(1);
				NULL204=(IASTNode)Match(input,NULL,Follow._NULL_in_constant2354); 
				NULL204_tree = (IASTNode)adaptor.DupNode(NULL204);


				adaptor.AddChild(root_0, NULL204_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:442:4: t= TRUE
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(442, 5);

				_last = (IASTNode)input.LT(1);
				t=(IASTNode)Match(input,TRUE,Follow._TRUE_in_constant2361); 
				t_tree = (IASTNode)adaptor.DupNode(t);


				adaptor.AddChild(root_0, t_tree);

				DebugLocation(442, 11);
				 ProcessBool(t); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:443:4: f= FALSE
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(443, 5);

				_last = (IASTNode)input.LT(1);
				f=(IASTNode)Match(input,FALSE,Follow._FALSE_in_constant2371); 
				f_tree = (IASTNode)adaptor.DupNode(f);


				adaptor.AddChild(root_0, f_tree);

				DebugLocation(443, 12);
				 ProcessBool(f); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:444:4: JAVA_CONSTANT
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(444, 4);

				_last = (IASTNode)input.LT(1);
				JAVA_CONSTANT205=(IASTNode)Match(input,JAVA_CONSTANT,Follow._JAVA_CONSTANT_in_constant2378); 
				JAVA_CONSTANT205_tree = (IASTNode)adaptor.DupNode(JAVA_CONSTANT205);


				adaptor.AddChild(root_0, JAVA_CONSTANT205_tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constant", 48);
			LeaveRule("constant", 48);
			LeaveRule_constant();
		}
		DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// HqlSqlWalker.g:447:1: literal : ( numericLiteral | stringLiteral );
	[GrammarRule("literal")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 49);
		TraceIn("literal", 49);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> numericLiteral206 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> stringLiteral207 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(447, 1);
		try
		{
			// HqlSqlWalker.g:448:2: ( numericLiteral | stringLiteral )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if (((LA67_1>=NUM_DECIMAL && LA67_1<=NUM_LONG)))
			{
				alt67 = 1;
			}
			else if ((LA67_1==QUOTED_String))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:448:4: numericLiteral
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(448, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._numericLiteral_in_literal2389);
				numericLiteral206=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, numericLiteral206.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:449:4: stringLiteral
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(449, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._stringLiteral_in_literal2394);
				stringLiteral207=stringLiteral();
				PopFollow();

				adaptor.AddChild(root_0, stringLiteral207.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 49);
			LeaveRule("literal", 49);
			LeaveRule_literal();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_numericLiteral();
	partial void LeaveRule_numericLiteral();
	// $ANTLR start "numericLiteral"
	// HqlSqlWalker.g:452:1: numericLiteral : ( NUM_INT | NUM_LONG | NUM_FLOAT | NUM_DOUBLE | NUM_DECIMAL );
	[GrammarRule("numericLiteral")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> numericLiteral()
	{
		EnterRule_numericLiteral();
		EnterRule("numericLiteral", 50);
		TraceIn("numericLiteral", 50);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode set208 = default(IASTNode);

		IASTNode set208_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "numericLiteral");
		DebugLocation(452, 1);
		try
		{
			// HqlSqlWalker.g:457:2: ( NUM_INT | NUM_LONG | NUM_FLOAT | NUM_DOUBLE | NUM_DECIMAL )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(457, 2);

			_last = (IASTNode)input.LT(1);
			set208=(IASTNode)input.LT(1);
			if ((input.LA(1)>=NUM_DECIMAL && input.LA(1)<=NUM_LONG))
			{
				input.Consume();
				set208_tree = (IASTNode)adaptor.DupNode(set208);


				adaptor.AddChild(root_0, set208_tree);

				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			 


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				ProcessNumericLiteral( retval.Tree );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericLiteral", 50);
			LeaveRule("numericLiteral", 50);
			LeaveRule_numericLiteral();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "numericLiteral"); }
		return retval;

	}
	// $ANTLR end "numericLiteral"

	partial void EnterRule_stringLiteral();
	partial void LeaveRule_stringLiteral();
	// $ANTLR start "stringLiteral"
	// HqlSqlWalker.g:464:1: stringLiteral : QUOTED_String ;
	[GrammarRule("stringLiteral")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> stringLiteral()
	{
		EnterRule_stringLiteral();
		EnterRule("stringLiteral", 51);
		TraceIn("stringLiteral", 51);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode QUOTED_String209 = default(IASTNode);

		IASTNode QUOTED_String209_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "stringLiteral");
		DebugLocation(464, 1);
		try
		{
			// HqlSqlWalker.g:465:2: ( QUOTED_String )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:465:4: QUOTED_String
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(465, 4);

			_last = (IASTNode)input.LT(1);
			QUOTED_String209=(IASTNode)Match(input,QUOTED_String,Follow._QUOTED_String_in_stringLiteral2441); 
			QUOTED_String209_tree = (IASTNode)adaptor.DupNode(QUOTED_String209);


			adaptor.AddChild(root_0, QUOTED_String209_tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stringLiteral", 51);
			LeaveRule("stringLiteral", 51);
			LeaveRule_stringLiteral();
		}
		DebugLocation(466, 1);
		} finally { DebugExitRule(GrammarFileName, "stringLiteral"); }
		return retval;

	}
	// $ANTLR end "stringLiteral"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();
	// $ANTLR start "identifier"
	// HqlSqlWalker.g:468:1: identifier : ( IDENT | WEIRD_IDENT ) ;
	[GrammarRule("identifier")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 52);
		TraceIn("identifier", 52);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode set210 = default(IASTNode);

		IASTNode set210_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(468, 1);
		try
		{
			// HqlSqlWalker.g:469:2: ( ( IDENT | WEIRD_IDENT ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(469, 2);

			_last = (IASTNode)input.LT(1);
			set210=(IASTNode)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==WEIRD_IDENT)
			{
				input.Consume();
				set210_tree = (IASTNode)adaptor.DupNode(set210);


				adaptor.AddChild(root_0, set210_tree);

				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			 


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifier", 52);
			LeaveRule("identifier", 52);
			LeaveRule_identifier();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_addrExpr();
	partial void LeaveRule_addrExpr();
	// $ANTLR start "addrExpr"
	// HqlSqlWalker.g:472:1: addrExpr[ bool root ] : ( addrExprDot[root] | addrExprIndex[root] | addrExprIdent[root] );
	[GrammarRule("addrExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExpr(bool root)
	{
		EnterRule_addrExpr();
		EnterRule("addrExpr", 53);
		TraceIn("addrExpr", 53);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprDot211 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIndex212 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIdent213 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "addrExpr");
		DebugLocation(472, 2);
		try
		{
			// HqlSqlWalker.g:473:2: ( addrExprDot[root] | addrExprIndex[root] | addrExprIdent[root] )
			int alt68=3;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt68 = 1;
				}
				break;
			case INDEX_OP:
				{
				alt68 = 2;
				}
				break;
			case IDENT:
			case WEIRD_IDENT:
				{
				alt68 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:473:4: addrExprDot[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(473, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprDot_in_addrExpr2471);
				addrExprDot211=addrExprDot(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprDot211.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:474:4: addrExprIndex[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(474, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprIndex_in_addrExpr2478);
				addrExprIndex212=addrExprIndex(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprIndex212.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:475:4: addrExprIdent[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(475, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprIdent_in_addrExpr2485);
				addrExprIdent213=addrExprIdent(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprIdent213.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExpr", 53);
			LeaveRule("addrExpr", 53);
			LeaveRule_addrExpr();
		}
		DebugLocation(476, 2);
		} finally { DebugExitRule(GrammarFileName, "addrExpr"); }
		return retval;

	}
	// $ANTLR end "addrExpr"

	partial void EnterRule_addrExprDot();
	partial void LeaveRule_addrExprDot();
	// $ANTLR start "addrExprDot"
	// HqlSqlWalker.g:478:1: addrExprDot[ bool root ] : ^(d= DOT lhs= addrExprLhs rhs= propertyName ) -> ^( $d $lhs $rhs) ;
	[GrammarRule("addrExprDot")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprDot(bool root)
	{
		EnterRule_addrExprDot();
		EnterRule("addrExprDot", 54);
		TraceIn("addrExprDot", 54);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode d = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> lhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> rhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode d_tree = default(IASTNode);
		RewriteRuleNodeStream stream_DOT=new RewriteRuleNodeStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_addrExprLhs=new RewriteRuleSubtreeStream(adaptor,"rule addrExprLhs");
		RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		try { DebugEnterRule(GrammarFileName, "addrExprDot");
		DebugLocation(478, 1);
		try
		{
			// HqlSqlWalker.g:483:2: ( ^(d= DOT lhs= addrExprLhs rhs= propertyName ) -> ^( $d $lhs $rhs) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:483:4: ^(d= DOT lhs= addrExprLhs rhs= propertyName )
			{
			DebugLocation(483, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(483, 7);

			_last = (IASTNode)input.LT(1);
			d=(IASTNode)Match(input,DOT,Follow._DOT_in_addrExprDot2509); 
			 
			stream_DOT.Add(d);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(483, 15);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExprLhs_in_addrExprDot2513);
			lhs=addrExprLhs();
			PopFollow();

			stream_addrExprLhs.Add(lhs.Tree);
			DebugLocation(483, 31);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyName_in_addrExprDot2517);
			rhs=propertyName();
			PopFollow();

			stream_propertyName.Add(rhs.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, lhs, rhs
			// token labels: d
			// rule labels: lhs, rhs, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
			RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 484:3: -> ^( $d $lhs $rhs)
			{
				DebugLocation(484, 6);
				// HqlSqlWalker.g:484:6: ^( $d $lhs $rhs)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(484, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_d.NextNode(), root_1);

				DebugLocation(484, 12);
				adaptor.AddChild(root_1, stream_lhs.NextTree());
				DebugLocation(484, 17);
				adaptor.AddChild(root_1, stream_rhs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				LookupProperty(retval.Tree,root,false);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprDot", 54);
			LeaveRule("addrExprDot", 54);
			LeaveRule_addrExprDot();
		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprDot"); }
		return retval;

	}
	// $ANTLR end "addrExprDot"

	partial void EnterRule_addrExprIndex();
	partial void LeaveRule_addrExprIndex();
	// $ANTLR start "addrExprIndex"
	// HqlSqlWalker.g:487:1: addrExprIndex[ bool root ] : ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr ) -> ^( $i $lhs2 $rhs2) ;
	[GrammarRule("addrExprIndex")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIndex(bool root)
	{
		EnterRule_addrExprIndex();
		EnterRule("addrExprIndex", 55);
		TraceIn("addrExprIndex", 55);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode i = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> lhs2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> rhs2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode i_tree = default(IASTNode);
		RewriteRuleNodeStream stream_INDEX_OP=new RewriteRuleNodeStream(adaptor,"token INDEX_OP");
		RewriteRuleSubtreeStream stream_addrExprLhs=new RewriteRuleSubtreeStream(adaptor,"rule addrExprLhs");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "addrExprIndex");
		DebugLocation(487, 1);
		try
		{
			// HqlSqlWalker.g:493:2: ( ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr ) -> ^( $i $lhs2 $rhs2) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:493:4: ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr )
			{
			DebugLocation(493, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(493, 7);

			_last = (IASTNode)input.LT(1);
			i=(IASTNode)Match(input,INDEX_OP,Follow._INDEX_OP_in_addrExprIndex2556); 
			 
			stream_INDEX_OP.Add(i);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(493, 21);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExprLhs_in_addrExprIndex2560);
			lhs2=addrExprLhs();
			PopFollow();

			stream_addrExprLhs.Add(lhs2.Tree);
			DebugLocation(493, 38);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._expr_in_addrExprIndex2564);
			rhs2=expr();
			PopFollow();

			stream_expr.Add(rhs2.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: i, lhs2, rhs2
			// token labels: i
			// rule labels: lhs2, rhs2, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_i=new RewriteRuleNodeStream(adaptor,"token i",i);
			RewriteRuleSubtreeStream stream_lhs2=new RewriteRuleSubtreeStream(adaptor,"rule lhs2",lhs2!=null?lhs2.Tree:null);
			RewriteRuleSubtreeStream stream_rhs2=new RewriteRuleSubtreeStream(adaptor,"rule rhs2",rhs2!=null?rhs2.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 494:3: -> ^( $i $lhs2 $rhs2)
			{
				DebugLocation(494, 6);
				// HqlSqlWalker.g:494:6: ^( $i $lhs2 $rhs2)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(494, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_i.NextNode(), root_1);

				DebugLocation(494, 12);
				adaptor.AddChild(root_1, stream_lhs2.NextTree());
				DebugLocation(494, 18);
				adaptor.AddChild(root_1, stream_rhs2.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				ProcessIndex(retval.Tree);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprIndex", 55);
			LeaveRule("addrExprIndex", 55);
			LeaveRule_addrExprIndex();
		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprIndex"); }
		return retval;

	}
	// $ANTLR end "addrExprIndex"

	partial void EnterRule_addrExprIdent();
	partial void LeaveRule_addrExprIdent();
	// $ANTLR start "addrExprIdent"
	// HqlSqlWalker.g:497:1: addrExprIdent[ bool root ] : p= identifier -> {IsNonQualifiedPropertyRef($p.tree)}? ^() -> ^() ;
	[GrammarRule("addrExprIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIdent(bool root)
	{
		EnterRule_addrExprIdent();
		EnterRule("addrExprIdent", 56);
		TraceIn("addrExprIdent", 56);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "addrExprIdent");
		DebugLocation(497, 1);
		try
		{
			// HqlSqlWalker.g:498:2: (p= identifier -> {IsNonQualifiedPropertyRef($p.tree)}? ^() -> ^() )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:498:4: p= identifier
			{
			DebugLocation(498, 5);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_addrExprIdent2596);
			p=identifier();
			PopFollow();

			stream_identifier.Add(p.Tree);


			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 499:2: -> {IsNonQualifiedPropertyRef($p.tree)}? ^()
			if (IsNonQualifiedPropertyRef((p!=null?((IASTNode)p.Tree):default(IASTNode))))
			{
				DebugLocation(499, 43);
				// HqlSqlWalker.g:499:43: ^()
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(499, 45);
				root_1 = (IASTNode)adaptor.BecomeRoot(LookupNonQualifiedProperty((p!=null?((IASTNode)p.Tree):default(IASTNode))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 500:2: -> ^()
			{
				DebugLocation(500, 5);
				// HqlSqlWalker.g:500:5: ^()
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(500, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot(Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprIdent", 56);
			LeaveRule("addrExprIdent", 56);
			LeaveRule_addrExprIdent();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprIdent"); }
		return retval;

	}
	// $ANTLR end "addrExprIdent"

	partial void EnterRule_addrExprLhs();
	partial void LeaveRule_addrExprLhs();
	// $ANTLR start "addrExprLhs"
	// HqlSqlWalker.g:503:1: addrExprLhs : addrExpr[ false ] ;
	[GrammarRule("addrExprLhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprLhs()
	{
		EnterRule_addrExprLhs();
		EnterRule("addrExprLhs", 57);
		TraceIn("addrExprLhs", 57);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExpr214 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "addrExprLhs");
		DebugLocation(503, 1);
		try
		{
			// HqlSqlWalker.g:504:2: ( addrExpr[ false ] )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:504:4: addrExpr[ false ]
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(504, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExpr_in_addrExprLhs2624);
			addrExpr214=addrExpr(false);
			PopFollow();

			adaptor.AddChild(root_0, addrExpr214.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprLhs", 57);
			LeaveRule("addrExprLhs", 57);
			LeaveRule_addrExprLhs();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprLhs"); }
		return retval;

	}
	// $ANTLR end "addrExprLhs"

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();
	// $ANTLR start "propertyName"
	// HqlSqlWalker.g:507:1: propertyName : ( identifier | CLASS | ELEMENTS | INDICES );
	[GrammarRule("propertyName")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 58);
		TraceIn("propertyName", 58);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode CLASS216 = default(IASTNode);
		IASTNode ELEMENTS217 = default(IASTNode);
		IASTNode INDICES218 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> identifier215 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode CLASS216_tree = default(IASTNode);
		IASTNode ELEMENTS217_tree = default(IASTNode);
		IASTNode INDICES218_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(507, 1);
		try
		{
			// HqlSqlWalker.g:508:2: ( identifier | CLASS | ELEMENTS | INDICES )
			int alt69=4;
			try { DebugEnterDecision(69, false);
			switch (input.LA(1))
			{
			case IDENT:
			case WEIRD_IDENT:
				{
				alt69 = 1;
				}
				break;
			case CLASS:
				{
				alt69 = 2;
				}
				break;
			case ELEMENTS:
				{
				alt69 = 3;
				}
				break;
			case INDICES:
				{
				alt69 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:508:4: identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(508, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_propertyName2637);
				identifier215=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier215.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:509:4: CLASS
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(509, 4);

				_last = (IASTNode)input.LT(1);
				CLASS216=(IASTNode)Match(input,CLASS,Follow._CLASS_in_propertyName2642); 
				CLASS216_tree = (IASTNode)adaptor.DupNode(CLASS216);


				adaptor.AddChild(root_0, CLASS216_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:510:4: ELEMENTS
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(510, 4);

				_last = (IASTNode)input.LT(1);
				ELEMENTS217=(IASTNode)Match(input,ELEMENTS,Follow._ELEMENTS_in_propertyName2647); 
				ELEMENTS217_tree = (IASTNode)adaptor.DupNode(ELEMENTS217);


				adaptor.AddChild(root_0, ELEMENTS217_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:511:4: INDICES
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(511, 4);

				_last = (IASTNode)input.LT(1);
				INDICES218=(IASTNode)Match(input,INDICES,Follow._INDICES_in_propertyName2652); 
				INDICES218_tree = (IASTNode)adaptor.DupNode(INDICES218);


				adaptor.AddChild(root_0, INDICES218_tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyName", 58);
			LeaveRule("propertyName", 58);
			LeaveRule_propertyName();
		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"

	partial void EnterRule_propertyRef();
	partial void LeaveRule_propertyRef();
	// $ANTLR start "propertyRef"
	// HqlSqlWalker.g:514:1: propertyRef : ( propertyRefPath | propertyRefIdent );
	[GrammarRule("propertyRef")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRef()
	{
		EnterRule_propertyRef();
		EnterRule("propertyRef", 59);
		TraceIn("propertyRef", 59);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefPath219 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefIdent220 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "propertyRef");
		DebugLocation(514, 1);
		try
		{
			// HqlSqlWalker.g:515:2: ( propertyRefPath | propertyRefIdent )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_1 = input.LA(1);

			if ((LA70_1==DOT))
			{
				alt70 = 1;
			}
			else if ((LA70_1==IDENT||LA70_1==WEIRD_IDENT))
			{
				alt70 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:515:4: propertyRefPath
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(515, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRefPath_in_propertyRef2664);
				propertyRefPath219=propertyRefPath();
				PopFollow();

				adaptor.AddChild(root_0, propertyRefPath219.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:516:4: propertyRefIdent
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(516, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRefIdent_in_propertyRef2669);
				propertyRefIdent220=propertyRefIdent();
				PopFollow();

				adaptor.AddChild(root_0, propertyRefIdent220.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRef", 59);
			LeaveRule("propertyRef", 59);
			LeaveRule_propertyRef();
		}
		DebugLocation(517, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRef"); }
		return retval;

	}
	// $ANTLR end "propertyRef"

	partial void EnterRule_propertyRefPath();
	partial void LeaveRule_propertyRefPath();
	// $ANTLR start "propertyRefPath"
	// HqlSqlWalker.g:519:1: propertyRefPath : ^(d= DOT lhs= propertyRefLhs rhs= propertyName ) -> ^( $d $lhs $rhs) ;
	[GrammarRule("propertyRefPath")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefPath()
	{
		EnterRule_propertyRefPath();
		EnterRule("propertyRefPath", 60);
		TraceIn("propertyRefPath", 60);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode d = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> lhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> rhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode d_tree = default(IASTNode);
		RewriteRuleNodeStream stream_DOT=new RewriteRuleNodeStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_propertyRefLhs=new RewriteRuleSubtreeStream(adaptor,"rule propertyRefLhs");
		RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		try { DebugEnterRule(GrammarFileName, "propertyRefPath");
		DebugLocation(519, 1);
		try
		{
			// HqlSqlWalker.g:524:2: ( ^(d= DOT lhs= propertyRefLhs rhs= propertyName ) -> ^( $d $lhs $rhs) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:524:4: ^(d= DOT lhs= propertyRefLhs rhs= propertyName )
			{
			DebugLocation(524, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(524, 7);

			_last = (IASTNode)input.LT(1);
			d=(IASTNode)Match(input,DOT,Follow._DOT_in_propertyRefPath2689); 
			 
			stream_DOT.Add(d);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(524, 15);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRefLhs_in_propertyRefPath2693);
			lhs=propertyRefLhs();
			PopFollow();

			stream_propertyRefLhs.Add(lhs.Tree);
			DebugLocation(524, 34);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyName_in_propertyRefPath2697);
			rhs=propertyName();
			PopFollow();

			stream_propertyName.Add(rhs.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, lhs, rhs
			// token labels: d
			// rule labels: lhs, rhs, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
			RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 525:3: -> ^( $d $lhs $rhs)
			{
				DebugLocation(525, 6);
				// HqlSqlWalker.g:525:6: ^( $d $lhs $rhs)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(525, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_d.NextNode(), root_1);

				DebugLocation(525, 12);
				adaptor.AddChild(root_1, stream_lhs.NextTree());
				DebugLocation(525, 17);
				adaptor.AddChild(root_1, stream_rhs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				// This gives lookupProperty() a chance to transform the tree to process collection properties (.elements, etc).
				retval.Tree = LookupProperty((IASTNode) retval.Tree,false,true);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefPath", 60);
			LeaveRule("propertyRefPath", 60);
			LeaveRule_propertyRefPath();
		}
		DebugLocation(526, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefPath"); }
		return retval;

	}
	// $ANTLR end "propertyRefPath"

	partial void EnterRule_propertyRefIdent();
	partial void LeaveRule_propertyRefIdent();
	// $ANTLR start "propertyRefIdent"
	// HqlSqlWalker.g:528:1: propertyRefIdent : p= identifier ;
	[GrammarRule("propertyRefIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefIdent()
	{
		EnterRule_propertyRefIdent();
		EnterRule("propertyRefIdent", 61);
		TraceIn("propertyRefIdent", 61);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "propertyRefIdent");
		DebugLocation(528, 1);
		try
		{
			// HqlSqlWalker.g:542:2: (p= identifier )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:542:4: p= identifier
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(542, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_propertyRefIdent2734);
			p=identifier();
			PopFollow();

			adaptor.AddChild(root_0, p.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				// In many cases, things other than property-refs are recognized
				// by this propertyRef rule.  Some of those I have seen:
				//  1) select-clause from-aliases
				//  2) sql-functions
				if ( IsNonQualifiedPropertyRef((p!=null?((IASTNode)p.Tree):default(IASTNode))) ) {
					retval.Tree = LookupNonQualifiedProperty((p!=null?((IASTNode)p.Tree):default(IASTNode)));
				}
				else {
					Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode)));
					retval.Tree = (p!=null?((IASTNode)p.Tree):default(IASTNode));
				}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefIdent", 61);
			LeaveRule("propertyRefIdent", 61);
			LeaveRule_propertyRefIdent();
		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefIdent"); }
		return retval;

	}
	// $ANTLR end "propertyRefIdent"

	partial void EnterRule_propertyRefLhs();
	partial void LeaveRule_propertyRefLhs();
	// $ANTLR start "propertyRefLhs"
	// HqlSqlWalker.g:545:1: propertyRefLhs : propertyRef ;
	[GrammarRule("propertyRefLhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefLhs()
	{
		EnterRule_propertyRefLhs();
		EnterRule("propertyRefLhs", 62);
		TraceIn("propertyRefLhs", 62);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRef221 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "propertyRefLhs");
		DebugLocation(545, 1);
		try
		{
			// HqlSqlWalker.g:546:2: ( propertyRef )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:546:4: propertyRef
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(546, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_propertyRefLhs2746);
			propertyRef221=propertyRef();
			PopFollow();

			adaptor.AddChild(root_0, propertyRef221.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefLhs", 62);
			LeaveRule("propertyRefLhs", 62);
			LeaveRule_propertyRefLhs();
		}
		DebugLocation(547, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefLhs"); }
		return retval;

	}
	// $ANTLR end "propertyRefLhs"

	partial void EnterRule_aliasRef();
	partial void LeaveRule_aliasRef();
	// $ANTLR start "aliasRef"
	// HqlSqlWalker.g:549:1: aliasRef : i= identifier ;
	[GrammarRule("aliasRef")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aliasRef()
	{
		EnterRule_aliasRef();
		EnterRule("aliasRef", 63);
		TraceIn("aliasRef", 63);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> i = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "aliasRef");
		DebugLocation(549, 1);
		try
		{
			// HqlSqlWalker.g:554:2: (i= identifier )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:554:4: i= identifier
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(554, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_aliasRef2767);
			i=identifier();
			PopFollow();

			adaptor.AddChild(root_0, i.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					LookupAlias(retval.Tree);
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aliasRef", 63);
			LeaveRule("aliasRef", 63);
			LeaveRule_aliasRef();
		}
		DebugLocation(556, 1);
		} finally { DebugExitRule(GrammarFileName, "aliasRef"); }
		return retval;

	}
	// $ANTLR end "aliasRef"

	partial void EnterRule_parameter();
	partial void LeaveRule_parameter();
	// $ANTLR start "parameter"
	// HqlSqlWalker.g:558:1: parameter : ( ^(c= COLON a= identifier ) -> ^() | ^(p= PARAM (n= NUM_INT )? ) -> {n != null}? ^() -> ^() );
	[GrammarRule("parameter")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> parameter()
	{
		EnterRule_parameter();
		EnterRule("parameter", 64);
		TraceIn("parameter", 64);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode c = default(IASTNode);
		IASTNode p = default(IASTNode);
		IASTNode n = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> a = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode c_tree = default(IASTNode);
		IASTNode p_tree = default(IASTNode);
		IASTNode n_tree = default(IASTNode);
		RewriteRuleNodeStream stream_COLON=new RewriteRuleNodeStream(adaptor,"token COLON");
		RewriteRuleNodeStream stream_PARAM=new RewriteRuleNodeStream(adaptor,"token PARAM");
		RewriteRuleNodeStream stream_NUM_INT=new RewriteRuleNodeStream(adaptor,"token NUM_INT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "parameter");
		DebugLocation(558, 1);
		try
		{
			// HqlSqlWalker.g:559:2: ( ^(c= COLON a= identifier ) -> ^() | ^(p= PARAM (n= NUM_INT )? ) -> {n != null}? ^() -> ^() )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==COLON))
			{
				alt72 = 1;
			}
			else if ((LA72_1==PARAM))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:559:4: ^(c= COLON a= identifier )
				{
				DebugLocation(559, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(559, 7);

				_last = (IASTNode)input.LT(1);
				c=(IASTNode)Match(input,COLON,Follow._COLON_in_parameter2785); 
				 
				stream_COLON.Add(c);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(559, 15);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_parameter2789);
				a=identifier();
				PopFollow();

				stream_identifier.Add(a.Tree);

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 561:3: -> ^()
				{
					DebugLocation(561, 6);
					// HqlSqlWalker.g:561:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(561, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(GenerateNamedParameter( c, (a!=null?((IASTNode)a.Tree):default(IASTNode)) ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:562:4: ^(p= PARAM (n= NUM_INT )? )
				{
				DebugLocation(562, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(562, 7);

				_last = (IASTNode)input.LT(1);
				p=(IASTNode)Match(input,PARAM,Follow._PARAM_in_parameter2810); 
				 
				stream_PARAM.Add(p);


				if (input.LA(1) == TokenTypes.Down) {
					Match(input, TokenTypes.Down, null); 
					DebugLocation(562, 14);
					// HqlSqlWalker.g:562:14: (n= NUM_INT )?
					int alt71=2;
					try { DebugEnterSubRule(71);
					try { DebugEnterDecision(71, false);
					int LA71_1 = input.LA(1);

					if ((LA71_1==NUM_INT))
					{
						alt71 = 1;
					}
					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:562:15: n= NUM_INT
						{
						DebugLocation(562, 16);

						_last = (IASTNode)input.LT(1);
						n=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_parameter2815); 
						 
						stream_NUM_INT.Add(n);


						}
						break;

					}
					} finally { DebugExitSubRule(71); }


					Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 563:3: -> {n != null}? ^()
				if (n != null)
				{
					DebugLocation(563, 19);
					// HqlSqlWalker.g:563:19: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(563, 21);
					root_1 = (IASTNode)adaptor.BecomeRoot(GenerateNamedParameter( p, n ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 564:3: -> ^()
				{
					DebugLocation(564, 6);
					// HqlSqlWalker.g:564:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(564, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(GeneratePositionalParameter( p ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameter", 64);
			LeaveRule("parameter", 64);
			LeaveRule_parameter();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter"); }
		return retval;

	}
	// $ANTLR end "parameter"

	partial void EnterRule_numericInteger();
	partial void LeaveRule_numericInteger();
	// $ANTLR start "numericInteger"
	// HqlSqlWalker.g:567:1: numericInteger : NUM_INT ;
	[GrammarRule("numericInteger")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> numericInteger()
	{
		EnterRule_numericInteger();
		EnterRule("numericInteger", 65);
		TraceIn("numericInteger", 65);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode NUM_INT222 = default(IASTNode);

		IASTNode NUM_INT222_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "numericInteger");
		DebugLocation(567, 1);
		try
		{
			// HqlSqlWalker.g:568:2: ( NUM_INT )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:568:4: NUM_INT
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(568, 4);

			_last = (IASTNode)input.LT(1);
			NUM_INT222=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_numericInteger2848); 
			NUM_INT222_tree = (IASTNode)adaptor.DupNode(NUM_INT222);


			adaptor.AddChild(root_0, NUM_INT222_tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericInteger", 65);
			LeaveRule("numericInteger", 65);
			LeaveRule_numericInteger();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "numericInteger"); }
		return retval;

	}
	// $ANTLR end "numericInteger"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _selectStatement_in_statement202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatement_in_statement206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _deleteStatement_in_statement210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_selectStatement225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatement249 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _VERSIONED_in_updateStatement256 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _fromClause_in_updateStatement262 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _setClause_in_updateStatement266 = new BitSet(new ulong[]{0x8UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_updateStatement271 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DELETE_in_deleteStatement314 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromClause_in_deleteStatement318 = new BitSet(new ulong[]{0x8UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_deleteStatement321 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INSERT_in_insertStatement351 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _intoClause_in_insertStatement355 = new BitSet(new ulong[]{0x0UL,0x1000020000000000UL});
		public static readonly BitSet _query_in_insertStatement357 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INTO_in_intoClause381 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_intoClause388 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _insertablePropertySpec_in_intoClause393 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RANGE_in_insertablePropertySpec409 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_insertablePropertySpec412 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _SET_in_setClause429 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assignment_in_setClause434 = new BitSet(new ulong[]{0x4000000008UL});
		public static readonly BitSet _EQ_in_assignment461 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_assignment466 = new BitSet(new ulong[]{0x8801003108ED010UL,0x561006C01F814010UL,0x1UL});
		public static readonly BitSet _newValue_in_assignment472 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_newValue488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_newValue492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unionedQuery_in_query503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNION_in_query510 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _unionedQuery_in_query512 = new BitSet(new ulong[]{0x0UL,0x1000020000000000UL});
		public static readonly BitSet _query_in_query514 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUERY_in_unionedQuery537 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SELECT_FROM_in_unionedQuery549 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromClause_in_unionedQuery557 = new BitSet(new ulong[]{0x8UL,0x400000000000UL});
		public static readonly BitSet _selectClause_in_unionedQuery566 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _whereClause_in_unionedQuery581 = new BitSet(new ulong[]{0x28000000000008UL,0x42000800000000UL});
		public static readonly BitSet _groupClause_in_unionedQuery591 = new BitSet(new ulong[]{0x20000000000008UL,0x42000800000000UL});
		public static readonly BitSet _havingClause_in_unionedQuery601 = new BitSet(new ulong[]{0x8UL,0x42000800000000UL});
		public static readonly BitSet _orderClause_in_unionedQuery611 = new BitSet(new ulong[]{0x8UL,0x42000000000000UL});
		public static readonly BitSet _skipClause_in_unionedQuery621 = new BitSet(new ulong[]{0x8UL,0x40000000000000UL});
		public static readonly BitSet _takeClause_in_unionedQuery631 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ORDER_in_orderClause688 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _orderExprs_in_orderClause693 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _query_in_orderClause697 = new BitSet(new ulong[]{0x40000408UL});
		public static readonly BitSet _orderExpr_in_orderExprs720 = new BitSet(new ulong[]{0x8801003508ED412UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _orderExprs_in_orderExprs734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _resultVariableRef_in_orderExpr749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_orderExpr754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_resultVariableRef774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skipClause796 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_skipClause799 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parameter_in_skipClause803 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TAKE_in_takeClause817 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_takeClause820 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parameter_in_takeClause824 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GROUP_in_groupClause838 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_groupClause843 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _HAVING_in_havingClause859 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_havingClause861 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SELECT_in_selectClause875 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DISTINCT_in_selectClause882 = new BitSet(new ulong[]{0x10800007188ED250UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _selectExprList_in_selectClause888 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _selectExpr_in_selectExprList923 = new BitSet(new ulong[]{0x10800007188ED252UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _aliasedSelectExpr_in_selectExprList927 = new BitSet(new ulong[]{0x10800007188ED252UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _AS_in_aliasedSelectExpr951 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _selectExpr_in_aliasedSelectExpr955 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _identifier_in_aliasedSelectExpr959 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _propertyRef_in_selectExpr974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_selectExpr986 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aliasRef_in_selectExpr990 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OBJECT_in_selectExpr1002 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aliasRef_in_selectExpr1006 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _constructor_in_selectExpr1017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_selectExpr1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_selectExpr1033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _count_in_selectExpr1038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionFunction_in_selectExpr1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectExpr1051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arithmeticExpr_in_selectExpr1056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_selectExpr1061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_count1073 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aggregateExpr_in_count1088 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ROW_STAR_in_count1092 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONSTRUCTOR_in_constructor1108 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_constructor1110 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _selectExpr_in_constructor1114 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _aliasedSelectExpr_in_constructor1118 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _expr_in_aggregateExpr1134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionFunction_in_aggregateExpr1140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromClause1160 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromElementList_in_fromClause1164 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _fromElement_in_fromElementList1182 = new BitSet(new ulong[]{0x400000000002UL,0x80000000020UL});
		public static readonly BitSet _RANGE_in_fromElement1207 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_fromElement1211 = new BitSet(new ulong[]{0x200000000028UL});
		public static readonly BitSet _ALIAS_in_fromElement1216 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _FETCH_in_fromElement1223 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _joinElement_in_fromElement1250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FILTER_ENTITY_in_fromElement1265 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALIAS_in_fromElement1269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JOIN_in_joinElement1298 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _joinType_in_joinElement1303 = new BitSet(new ulong[]{0x80200200000000UL,0x0UL,0x1UL});
		public static readonly BitSet _FETCH_in_joinElement1313 = new BitSet(new ulong[]{0x80000200000000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyRef_in_joinElement1319 = new BitSet(new ulong[]{0x200000000028UL,0x0UL,0x8UL});
		public static readonly BitSet _ALIAS_in_joinElement1324 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x8UL});
		public static readonly BitSet _FETCH_in_joinElement1331 = new BitSet(new ulong[]{0x8UL,0x0UL,0x8UL});
		public static readonly BitSet _WITH_in_joinElement1340 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEFT_in_joinType1381 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _RIGHT_in_joinType1387 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _OUTER_in_joinType1393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FULL_in_joinType1407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INNER_in_joinType1414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_path1436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_path1444 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_path1448 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _identifier_in_path1452 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _path_in_pathAsIdent1471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withClause1512 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_withClause1518 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _WHERE_in_whereClause1546 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_whereClause1552 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_logicalExpr1578 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1580 = new BitSet(new ulong[]{0xC94024200002090UL,0x4007A4A4CUL,0x1UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1582 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_logicalExpr1589 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1591 = new BitSet(new ulong[]{0xC94024200002090UL,0x4007A4A4CUL,0x1UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1593 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_in_logicalExpr1600 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1602 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _comparisonExpr_in_logicalExpr1608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_logicalExpr1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalPath_in_logicalExpr1618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_logicalPath1637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_comparisonExpr1675 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1677 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1679 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NE_in_comparisonExpr1686 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1688 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1690 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LT_in_comparisonExpr1697 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1699 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1701 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GT_in_comparisonExpr1708 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1710 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1712 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LE_in_comparisonExpr1719 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1721 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1723 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GE_in_comparisonExpr1730 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1732 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1734 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LIKE_in_comparisonExpr1741 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1743 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_comparisonExpr1745 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _ESCAPE_in_comparisonExpr1750 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1752 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_LIKE_in_comparisonExpr1764 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1766 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_comparisonExpr1768 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _ESCAPE_in_comparisonExpr1773 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1775 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BETWEEN_in_comparisonExpr1787 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1789 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1791 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1793 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_BETWEEN_in_comparisonExpr1800 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1802 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1804 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1806 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IN_in_comparisonExpr1813 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1815 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _inRhs_in_comparisonExpr1817 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_IN_in_comparisonExpr1825 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1827 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _inRhs_in_comparisonExpr1829 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IS_NULL_in_comparisonExpr1837 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1839 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IS_NOT_NULL_in_comparisonExpr1846 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1848 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXISTS_in_comparisonExpr1857 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1861 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_comparisonExpr1865 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IN_LIST_in_inRhs1889 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_inRhs1893 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_inRhs1897 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_exprOrSubquery1913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_exprOrSubquery1918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANY_in_exprOrSubquery1924 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1926 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ALL_in_exprOrSubquery1933 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1935 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SOME_in_exprOrSubquery1942 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1944 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _collectionFunction_in_collectionFunctionOrSubselect1957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_collectionFunctionOrSubselect1962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_expr1976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VECTOR_EXPR_in_expr1988 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1991 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _constant_in_expr2000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arithmeticExpr_in_expr2005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_expr2010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_expr2022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _count_in_expr2027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_arithmeticExpr2055 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2057 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2059 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_in_arithmeticExpr2066 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2068 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2070 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_in_arithmeticExpr2077 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2079 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2081 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_in_arithmeticExpr2088 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2090 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2092 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BNOT_in_arithmeticExpr2099 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2101 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BAND_in_arithmeticExpr2108 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2110 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2112 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BOR_in_arithmeticExpr2119 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2121 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2123 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BXOR_in_arithmeticExpr2130 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2132 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_MINUS_in_arithmeticExpr2142 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2144 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _caseExpr_in_arithmeticExpr2152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseExpr2164 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _WHEN_in_caseExpr2170 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_caseExpr2172 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_caseExpr2174 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELSE_in_caseExpr2181 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2183 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CASE2_in_caseExpr2195 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2199 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _WHEN_in_caseExpr2203 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2205 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_caseExpr2207 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELSE_in_caseExpr2214 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2216 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELEMENTS_in_collectionFunction2238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_collectionFunction2244 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDICES_in_collectionFunction2263 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_collectionFunction2269 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _METHOD_CALL_in_functionCall2294 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathAsIdent_in_functionCall2299 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _EXPR_LIST_in_functionCall2304 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_functionCall2307 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _query_in_functionCall2311 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _comparisonExpr_in_functionCall2315 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _AGGREGATE_in_functionCall2334 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aggregateExpr_in_functionCall2336 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _literal_in_constant2349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_constant2354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_constant2361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_constant2371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JAVA_CONSTANT_in_constant2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_literal2389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringLiteral_in_literal2394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUOTED_String_in_stringLiteral2441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprDot_in_addrExpr2471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprIndex_in_addrExpr2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprIdent_in_addrExpr2485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_addrExprDot2509 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _addrExprLhs_in_addrExprDot2513 = new BitSet(new ulong[]{0x1080000400100000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyName_in_addrExprDot2517 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_OP_in_addrExprIndex2556 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _addrExprLhs_in_addrExprIndex2560 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_addrExprIndex2564 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _identifier_in_addrExprIdent2596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_addrExprLhs2624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_propertyName2637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_propertyName2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELEMENTS_in_propertyName2647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDICES_in_propertyName2652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRefPath_in_propertyRef2664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRefIdent_in_propertyRef2669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_propertyRefPath2689 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRefLhs_in_propertyRefPath2693 = new BitSet(new ulong[]{0x1080000400100000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyName_in_propertyRefPath2697 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _identifier_in_propertyRefIdent2734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRef_in_propertyRefLhs2746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_aliasRef2767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_parameter2785 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _identifier_in_parameter2789 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PARAM_in_parameter2810 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_parameter2815 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUM_INT_in_numericInteger2848 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  NHibernate.Hql.Ast.ANTLR 
